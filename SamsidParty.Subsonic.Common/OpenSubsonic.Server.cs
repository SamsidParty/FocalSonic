//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace SamsidParty.Subsonic.Common
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IController
    {

        /// <summary>
        /// Adds a message to the chat log.
        /// </summary>

        /// <remarks>
        /// Adds a message to the chat log.
        /// </remarks>

        /// <param name="message">The chat message.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> GetAddChatMessageAsync(string message);

        /// <summary>
        /// Adds a message to the chat log.
        /// </summary>

        /// <remarks>
        /// Adds a message to the chat log.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostAddChatMessageAsync(Body body);

        /// <summary>
        /// Changes the password of an existing user on the server.
        /// </summary>

        /// <remarks>
        /// Changes the password of an existing user on the server, using the following parameters. You can only change your own password unless you have admin privileges.
        /// </remarks>

        /// <param name="username">The name of the user which should change its password.</param>

        /// <param name="password">The new password of the new user, either in clear text of hex-encoded (see above).</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> ChangePasswordAsync(string username, string password);

        /// <summary>
        /// Changes the password of an existing user on the server.
        /// </summary>

        /// <remarks>
        /// Changes the password of an existing user on the server, using the following parameters. You can only change your own password unless you have admin privileges.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostChangePasswordAsync(Body2 body);

        /// <summary>
        /// Creates or updates a bookmark.
        /// </summary>

        /// <remarks>
        /// Creates or updates a bookmark (a position within a media file). Bookmarks are personal and not visible to other users.
        /// </remarks>

        /// <param name="id">ID of the media file to bookmark. If a bookmark already exists for this file it will be overwritten.</param>

        /// <param name="position">The position (in milliseconds) within the media file.</param>

        /// <param name="comment">A user-defined comment.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> CreateBookmarkAsync(string id, int position, string comment);

        /// <summary>
        /// Creates or updates a bookmark.
        /// </summary>

        /// <remarks>
        /// Creates or updates a bookmark (a position within a media file). Bookmarks are personal and not visible to other users.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostCreateBookmarkAsync(Body3 body);

        /// <summary>
        /// Adds a new internet radio station.
        /// </summary>

        /// <remarks>
        /// Adds a new internet radio station. Only users with admin privileges are allowed to call this method.
        /// </remarks>

        /// <param name="streamUrl">The stream URL for the station.</param>

        /// <param name="name">The station name.</param>

        /// <param name="homepageUrl">The home page URL for the station.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> CreateInternetRadioStationAsync(string streamUrl, string name, string homepageUrl);

        /// <summary>
        /// Adds a new internet radio station.
        /// </summary>

        /// <remarks>
        /// Adds a new internet radio station. Only users with admin privileges are allowed to call this method.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostCreateInternetRadioStationAsync(Body4 body);

        /// <summary>
        /// Creates (or updates) a playlist.
        /// </summary>

        /// <remarks>
        /// Creates (or updates) a playlist.
        /// </remarks>

        /// <param name="playlistId">The playlist ID. Required if updating an existing playlist.</param>

        /// <param name="name">The human-readable name of the playlist. Required if creating a new playlist.</param>

        /// <param name="songId">ID of a song in the playlist. Use one `songId` parameter for each song in the playlist.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<CreatePlaylistResponse> CreatePlaylistAsync(string playlistId, string name, System.Collections.Generic.IEnumerable<string> songId);

        /// <summary>
        /// Creates (or updates) a playlist.
        /// </summary>

        /// <remarks>
        /// Creates (or updates) a playlist.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<CreatePlaylistResponse> PostCreatePlaylistAsync(Body5 body);

        /// <summary>
        /// Adds a new Podcast channel.
        /// </summary>

        /// <remarks>
        /// Adds a new Podcast channel. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// </remarks>

        /// <param name="url">The URL of the Podcast to add.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> CreatePodcastChannelAsync(string url);

        /// <summary>
        /// Adds a new Podcast channel.
        /// </summary>

        /// <remarks>
        /// Adds a new Podcast channel. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostCreatePodcastChannelAsync(Body6 body);

        /// <summary>
        /// Creates a public URL that can be used by anyone to stream music or video from the server.
        /// </summary>

        /// <remarks>
        /// Creates a public URL that can be used by anyone to stream music or video from the server. The URL is short and suitable for posting on Facebook, Twitter etc. Note: The user must be authorized to share (see Settings &gt; Users &gt; User is allowed to share files with anyone). Since 1.6.0.
        /// </remarks>

        /// <param name="id">ID of a song, album or video to share. Use one id parameter for each entry to share.</param>

        /// <param name="description">A user-defined description that will be displayed to people visiting the shared media.</param>

        /// <param name="expires">The time at which the share expires. Given as milliseconds since 1970.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<CreateSharesResponse> CreateShareAsync(System.Collections.Generic.IEnumerable<string> id, string description, int? expires);

        /// <summary>
        /// Creates a public URL that can be used by anyone to stream music or video from the server.
        /// </summary>

        /// <remarks>
        /// Creates a public URL that can be used by anyone to stream music or video from the server. The URL is short and suitable for posting on Facebook, Twitter etc. Note: The user must be authorized to share (see Settings &gt; Users &gt; User is allowed to share files with anyone). Since 1.6.0.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`).
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<CreateSharesResponse> PostCreateShareAsync(Body7 body);

        /// <summary>
        /// Creates a new user on the server.
        /// </summary>

        /// <remarks>
        /// Creates a new user on the server.
        /// </remarks>

        /// <param name="username">The name of the new user.</param>

        /// <param name="password">The password of the new user, either in clear text of hex-encoded (see above).</param>

        /// <param name="email">The email address of the new user.</param>

        /// <param name="ldapAuthenticated">Whether the user is authenticated in LDAP.</param>

        /// <param name="adminRole">Whether the user is administrator.</param>

        /// <param name="settingsRole">Whether the user is allowed to change personal settings and password.</param>

        /// <param name="streamRole">Whether the user is allowed to play files.</param>

        /// <param name="jukeboxRole">Whether the user is allowed to play files in jukebox mode.</param>

        /// <param name="downloadRole">Whether the user is allowed to download files.</param>

        /// <param name="uploadRole">Whether the user is allowed to upload files.</param>

        /// <param name="playlistRole">Whether the user is allowed to create and delete playlists. Since 1.8.0, changing this role has no effect.</param>

        /// <param name="coverArtRole">Whether the user is allowed to change cover art and tags.</param>

        /// <param name="commentRole">Whether the user is allowed to create and edit comments and ratings.</param>

        /// <param name="podcastRole">Whether the user is allowed to administrate Podcasts.</param>

        /// <param name="shareRole">(Since 1.8.0) Whether the user is allowed to share files with anyone.</param>

        /// <param name="videoConversionRole">(Since 1.15.0) Whether the user is allowed to start video conversions.</param>

        /// <param name="musicFolderId">(Since 1.12.0) IDs of the music folders the user is allowed access to. Include the parameter once for each folder. Default all folders.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> CreateUserAsync(string username, string password, string email, bool ldapAuthenticated, bool adminRole, bool settingsRole, bool streamRole, bool jukeboxRole, bool downloadRole, bool uploadRole, bool playlistRole, bool coverArtRole, bool commentRole, bool podcastRole, bool shareRole, bool videoConversionRole, System.Collections.Generic.IEnumerable<string> musicFolderId);

        /// <summary>
        /// Creates a new user on the server.
        /// </summary>

        /// <remarks>
        /// Creates a new user on the server.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostCreateUserAsync(Body8 body);

        /// <summary>
        /// Deletes a bookmark.
        /// </summary>

        /// <remarks>
        /// Deletes a bookmark (a position within a media file). Bookmarks are personal and not visible to other users.
        /// </remarks>

        /// <param name="id">ID of the media file for which to delete the bookmark. Other users’ bookmarks are not affected.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> DeleteBookmarkAsync(string id);

        /// <summary>
        /// Deletes a bookmark.
        /// </summary>

        /// <remarks>
        /// Deletes a bookmark (a position within a media file). Bookmarks are personal and not visible to other users.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostDeleteBookmarkAsync(Body9 body);

        /// <summary>
        /// Deletes an existing internet radio station.
        /// </summary>

        /// <remarks>
        /// Deletes an existing internet radio station. Only users with admin privileges are allowed to call this method.
        /// </remarks>

        /// <param name="id">The ID for the station.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> DeleteInternetRadioStationAsync(string id);

        /// <summary>
        /// Deletes an existing internet radio station.
        /// </summary>

        /// <remarks>
        /// Deletes an existing internet radio station. Only users with admin privileges are allowed to call this method.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostDeleteInternetRadioStationAsync(Body10 body);

        /// <summary>
        /// Deletes a saved playlist.
        /// </summary>

        /// <remarks>
        /// Deletes a saved playlist.
        /// </remarks>

        /// <param name="id">ID of the playlist to delete, as obtained by `getPlaylists`.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> DeletePlaylistAsync(string id);

        /// <summary>
        /// Deletes a saved playlist.
        /// </summary>

        /// <remarks>
        /// Deletes a saved playlist.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostDeletePlaylistAsync(Body11 body);

        /// <summary>
        /// Deletes a Podcast channel.
        /// </summary>

        /// <remarks>
        /// Deletes a Podcast channel. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// </remarks>

        /// <param name="id">The ID of the Podcast channel to delete.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> DeletePodcastChannelAsync(string id);

        /// <summary>
        /// Deletes a Podcast channel.
        /// </summary>

        /// <remarks>
        /// Deletes a Podcast channel. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostDeletePodcastChannelAsync(Body12 body);

        /// <summary>
        /// Deletes a Podcast episode.
        /// </summary>

        /// <remarks>
        /// Deletes a Podcast episode. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// </remarks>

        /// <param name="id">The ID of the Podcast episode to delete.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> DeletePodcastEpisodeAsync(string id);

        /// <summary>
        /// Deletes a Podcast episode.
        /// </summary>

        /// <remarks>
        /// Deletes a Podcast episode. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostDeletePodcastEpisodeAsync(Body13 body);

        /// <summary>
        /// Deletes an existing share.
        /// </summary>

        /// <remarks>
        /// Deletes an existing share
        /// </remarks>

        /// <param name="id">ID of the share to delete.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> DeleteShareAsync(string id);

        /// <summary>
        /// Deletes an existing share.
        /// </summary>

        /// <remarks>
        /// Deletes an existing share.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostDeleteShareAsync(Body14 body);

        /// <summary>
        /// Deletes an existing user on the server.
        /// </summary>

        /// <remarks>
        /// Deletes an existing user on the server.
        /// </remarks>

        /// <param name="username">The name of the user to delete.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> DeleteUserAsync(string username);

        /// <summary>
        /// Deletes an existing user on the server.
        /// </summary>

        /// <remarks>
        /// Deletes an existing user on the server.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostDeleteUserAsync(Body15 body);

        /// <summary>
        /// Downloads a given media file.
        /// </summary>

        /// <remarks>
        /// Downloads a given media file. Similar to stream, but this method returns the original media data without transcoding or downsampling.
        /// </remarks>

        /// <param name="id">A string which uniquely identifies the file to stream. Obtained by calls to getMusicDirectory.</param>

        /// <returns>Success (binary) or error (xml) response</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> DownloadAsync(string id);

        /// <summary>
        /// Downloads a given media file.
        /// </summary>

        /// <remarks>
        /// Downloads a given media file. Similar to stream, but this method returns the original media data without transcoding or downsampling.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Success (binary) or error (xml) response</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> PostDownloadAsync(Body16 body);

        /// <summary>
        /// Request the server to start downloading a given Podcast episode.
        /// </summary>

        /// <remarks>
        /// Request the server to start downloading a given Podcast episode. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// </remarks>

        /// <param name="id">The ID of the Podcast episode to download</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> DownloadPodcastEpisodeAsync(string id);

        /// <summary>
        /// Request the server to start downloading a given Podcast episode.
        /// </summary>

        /// <remarks>
        /// Request the server to start downloading a given Podcast episode. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostDownloadPodcastEpisodeAsync(Body17 body);

        /// <summary>
        /// Returns details for an album.
        /// </summary>

        /// <remarks>
        /// Returns details for an album, including a list of songs. This method organizes music according to ID3 tags.
        /// </remarks>

        /// <param name="id">The album ID.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetAlbumResponse> GetAlbumAsync(string id);

        /// <summary>
        /// Returns details for an album.
        /// </summary>

        /// <remarks>
        /// Returns details for an album, including a list of songs. This method organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetAlbumResponse> PostGetAlbumAsync(Body18 body);

        /// <summary>
        /// Returns album info.
        /// </summary>

        /// <remarks>
        /// Returns album notes, image URLs etc, using data from last.fm.
        /// </remarks>

        /// <param name="id">The album ID or song ID.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetAlbumInfoResponse> GetAlbumInfoAsync(string id);

        /// <summary>
        /// Returns album info.
        /// </summary>

        /// <remarks>
        /// Returns album notes, image URLs etc, using data from last.fm.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetAlbumInfoResponse> PostGetAlbumInfoAsync(Body19 body);

        /// <summary>
        /// Returns album info (v2).
        /// </summary>

        /// <remarks>
        /// Similar to getAlbumInfo, but organizes music according to ID3 tags.
        /// </remarks>

        /// <param name="id">The album ID or song ID.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetAlbumInfoResponse> GetAlbumInfo2Async(string id);

        /// <summary>
        /// Returns album info (v2).
        /// </summary>

        /// <remarks>
        /// Similar to getAlbumInfo, but organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetAlbumInfoResponse> PostGetAlbumInfo2Async(Body20 body);

        /// <summary>
        /// Returns a list of random, newest, highest rated etc. albums.
        /// </summary>

        /// <remarks>
        /// Returns a list of random, newest, highest rated etc. albums. Similar to the album lists on the home page of the Subsonic web interface.
        /// </remarks>

        /// <param name="size">The number of albums to return. Max 500.</param>

        /// <param name="offset">The list offset. Useful if you for example want to page through the list of newest albums.</param>

        /// <param name="fromYear">Required if `type=='byYear'`. The first year in the range. If `fromYear` &gt; `toYear` a reverse chronological list is returned.</param>

        /// <param name="toYear">Required if `type=='byYear'`. The last year in the range.</param>

        /// <param name="genre">Required if `type=='byGenre'`. The name of the genre, e.g., “Rock”.</param>

        /// <param name="musicFolderId">(Since 1.11.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetAlbumListResponse> GetAlbumListAsync(AlbumListType type, int size, int offset, int? fromYear, int? toYear, string genre, string musicFolderId);

        /// <summary>
        /// Returns a list of random, newest, highest rated etc. albums.
        /// </summary>

        /// <remarks>
        /// Returns a list of random, newest, highest rated etc. albums. Similar to the album lists on the home page of the Subsonic web interface.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetAlbumListResponse> PostGetAlbumListAsync(Body21 body);

        /// <summary>
        /// Returns a list of random, newest, highest rated etc. albums (v2).
        /// </summary>

        /// <remarks>
        /// Similar to `getAlbumList`, but organizes music according to ID3 tags.
        /// </remarks>

        /// <param name="size">The number of albums to return. Max 500.</param>

        /// <param name="offset">The list offset. Useful if you for example want to page through the list of newest albums.</param>

        /// <param name="fromYear">Required if `type=='byYear'`. The first year in the range. If `fromYear` &gt; `toYear` a reverse chronological list is returned.</param>

        /// <param name="toYear">Required if `type=='byYear'`. The last year in the range.</param>

        /// <param name="genre">Required if `type=='byGenre'`. The name of the genre, e.g., “Rock”.</param>

        /// <param name="musicFolderId">(Since 1.11.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetAlbumList2Response> GetAlbumList2Async(AlbumListType type, int size, int offset, int? fromYear, int? toYear, string genre, string musicFolderId);

        /// <summary>
        /// Returns a list of random, newest, highest rated etc. albums (v2).
        /// </summary>

        /// <remarks>
        /// Similar to `getAlbumList`, but organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetAlbumList2Response> PostGetAlbumList2Async(Body22 body);

        /// <summary>
        /// Returns details for an artist.
        /// </summary>

        /// <remarks>
        /// Returns details for an artist, including a list of albums. This method organizes music according to ID3 tags.
        /// </remarks>

        /// <param name="id">The artist ID.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetArtistResponse> GetArtistAsync(string id);

        /// <summary>
        /// Returns details for an artist.
        /// </summary>

        /// <remarks>
        /// Returns details for an artist, including a list of albums. This method organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetArtistResponse> PostGetArtistAsync(Body23 body);

        /// <summary>
        /// Returns artist info.
        /// </summary>

        /// <remarks>
        /// Returns artist info with biography, image URLs and similar artists, using data from last.fm.
        /// </remarks>

        /// <param name="id">The artist, album or song ID.</param>

        /// <param name="count">Max number of similar artists to return.</param>

        /// <param name="includeNotPresent">Whether to return artists that are not present in the media library.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetArtistInfoResponse> GetArtistInfoAsync(string id, int count, bool includeNotPresent);

        /// <summary>
        /// Returns artist info.
        /// </summary>

        /// <remarks>
        /// Returns artist info with biography, image URLs and similar artists, using data from last.fm.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetArtistInfoResponse> PostGetArtistInfoAsync(Body24 body);

        /// <summary>
        /// Returns artist info (v2).
        /// </summary>

        /// <remarks>
        /// Similar to `getArtistInfo`, but organizes music according to ID3 tags.
        /// </remarks>

        /// <param name="id">The artist, album or song ID.</param>

        /// <param name="count">Max number of similar artists to return.</param>

        /// <param name="includeNotPresent">Whether to return artists that are not present in the media library.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetArtistInfo2Response> GetArtistInfo2Async(string id, int count, bool includeNotPresent);

        /// <summary>
        /// Returns artist info (v2).
        /// </summary>

        /// <remarks>
        /// Similar to `getArtistInfo`, but organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetArtistInfo2Response> PostGetArtistInfo2Async(Body25 body);

        /// <summary>
        /// Returns all artists.
        /// </summary>

        /// <remarks>
        /// Similar to `getIndexes`, but organizes music according to ID3 tags.
        /// </remarks>

        /// <param name="musicFolderId">If specified, only return artists in the music folder with the given ID. See `getMusicFolders`.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetArtistsResponse> GetArtistsAsync(string musicFolderId);

        /// <summary>
        /// Returns all artists.
        /// </summary>

        /// <remarks>
        /// Similar to `getIndexes`, but organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetArtistsResponse> PostGetArtistsAsync(Body26 body);

        /// <summary>
        /// Returns the avatar (personal image) for a user.
        /// </summary>

        /// <remarks>
        /// Returns the avatar (personal image) for a user.
        /// </remarks>

        /// <returns>Success (binary) or error (xml) response</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> GetAvatarAsync(string username);

        /// <summary>
        /// Returns the avatar (personal image) for a user.
        /// </summary>

        /// <remarks>
        /// Returns the avatar (personal image) for a user.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Success (binary) or error (xml) response</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> PostGetAvatarAsync(Body27 body);

        /// <summary>
        /// Returns all bookmarks for this user.
        /// </summary>

        /// <remarks>
        /// Returns all bookmarks for this user. A bookmark is a position within a certain media file.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetBookmarksResponse> GetBookmarksAsync();

        /// <summary>
        /// Returns all bookmarks for this user.
        /// </summary>

        /// <remarks>
        /// Returns all bookmarks for this user. A bookmark is a position within a certain media file.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetBookmarksResponse> PostGetBookmarksAsync(object body);

        /// <summary>
        /// Returns captions (subtitles) for a video.
        /// </summary>

        /// <remarks>
        /// Returns captions (subtitles) for a video. Use `getVideoInfo` to get a list of available captions.
        /// </remarks>

        /// <param name="id">The ID of the video.</param>

        /// <param name="format">Preferred captions format (“srt” or “vtt”).</param>

        /// <returns>Returns the raw video captions.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> GetCaptionsAsync(string id, Format? format);

        /// <summary>
        /// Returns captions (subtitles) for a video.
        /// </summary>

        /// <remarks>
        /// Returns captions (subtitles) for a video. Use `getVideoInfo` to get a list of available captions.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Returns the raw video captions.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> PostGetCaptionsAsync(Body28 body);

        /// <summary>
        /// Returns the current visible (non-expired) chat messages.
        /// </summary>

        /// <remarks>
        /// Returns the current visible (non-expired) chat messages.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetChatMessagesResponse> GetChatMessagesAsync();

        /// <summary>
        /// Returns the current visible (non-expired) chat messages.
        /// </summary>

        /// <remarks>
        /// Returns the current visible (non-expired) chat messages.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetChatMessagesResponse> PostGetChatMessagesAsync(object body);

        /// <summary>
        /// Returns a cover art image.
        /// </summary>

        /// <remarks>
        /// Returns a cover art image.
        /// </remarks>

        /// <param name="id">The coverArt ID. Returned by most entities likes `Child` or `AlbumID3`</param>

        /// <param name="size">If specified, scale image to this size.</param>

        /// <returns>Success (binary) or error (xml) response</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> GetCoverArtAsync(string id, int? size);

        /// <summary>
        /// Returns a cover art image.
        /// </summary>

        /// <remarks>
        /// Returns a cover art image.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Success (binary) or error (xml) response</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> PostGetCoverArtAsync(Body29 body);

        /// <summary>
        /// Returns all genres.
        /// </summary>

        /// <remarks>
        /// Returns all genres.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetGenresResponse> GetGenresAsync();

        /// <summary>
        /// Returns all genres.
        /// </summary>

        /// <remarks>
        /// Returns all genres.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetGenresResponse> PostGetGenresAsync(object body);

        /// <summary>
        /// Returns an indexed structure of all artists.
        /// </summary>

        /// <remarks>
        /// Returns an indexed structure of all artists.
        /// </remarks>

        /// <param name="musicFolderId">If specified, only return artists in the music folder with the given ID. See `getMusicFolders`.</param>

        /// <param name="ifModifiedSince">If specified, only return a result if the artist collection has changed since the given time (in milliseconds since 1 Jan 1970).</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetIndexesResponse> GetIndexesAsync(string musicFolderId, int? ifModifiedSince);

        /// <summary>
        /// Returns an indexed structure of all artists.
        /// </summary>

        /// <remarks>
        /// Returns an indexed structure of all artists.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetIndexesResponse> PostGetIndexesAsync(Body30 body);

        /// <summary>
        /// Returns all internet radio stations.
        /// </summary>

        /// <remarks>
        /// Returns all internet radio stations. Takes no extra parameters.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetInternetRadioStationsResponse> GetInternetRadioStationsAsync();

        /// <summary>
        /// Returns all internet radio stations.
        /// </summary>

        /// <remarks>
        /// Returns all internet radio stations. Takes no extra parameters.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetInternetRadioStationsResponse> PostGetInternetRadioStationsAsync(object body);

        /// <summary>
        /// Get details about the software license.
        /// </summary>

        /// <remarks>
        /// Get details about the software license.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetLicenseResponse> GetLicenseAsync();

        /// <summary>
        /// Get details about the software license.
        /// </summary>

        /// <remarks>
        /// Get details about the software license.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetLicenseResponse> PostGetLicenseAsync(object body);

        /// <summary>
        /// Searches for and returns lyrics for a given song.
        /// </summary>

        /// <remarks>
        /// Searches for and returns lyrics for a given song.
        /// </remarks>

        /// <param name="artist">The artist name.</param>

        /// <param name="title">The song title.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetLyricsResponse> GetLyricsAsync(string artist, string title);

        /// <summary>
        /// Searches for and returns lyrics for a given song.
        /// </summary>

        /// <remarks>
        /// Searches for and returns lyrics for a given song.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetLyricsResponse> PostGetLyricsAsync(Body31 body);

        /// <summary>
        /// Add support for synchronized lyrics, multiple languages, and retrieval by song ID.
        /// </summary>

        /// <remarks>
        /// OpenSubsonic extension name `songLyrics` (As returned by `getOpenSubsonicExtensions`). Retrieves all structured lyrics from the server for a given song. The lyrics can come from embedded tags (SYLT/USLT), LRC file/text file, or any other external source.
        /// </remarks>

        /// <param name="id">The track ID.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetLyricsBySongIdResponse> GetLyricsBySongIdAsync(string id);

        /// <summary>
        /// Add support for synchronized lyrics, multiple languages, and retrieval by song ID.
        /// </summary>

        /// <remarks>
        /// OpenSubsonic extension name `songLyrics` (As returned by `getOpenSubsonicExtensions`). Retrieves all structured lyrics from the server for a given song. The lyrics can come from embedded tags (SYLT/USLT), LRC file/text file, or any other external source.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetLyricsBySongIdResponse> PostGetLyricsBySongIdAsync(Body32 body);

        /// <summary>
        /// Returns a listing of all files in a music directory.
        /// </summary>

        /// <remarks>
        /// Returns a listing of all files in a music directory. Typically used to get list of albums for an artist, or list of songs for an album.
        /// </remarks>

        /// <param name="id">A string which uniquely identifies the music folder. Obtained by calls to `getIndexes` or `getMusicDirectory`.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetMusicDirectoryResponse> GetMusicDirectoryAsync(string id);

        /// <summary>
        /// Returns a listing of all files in a music directory.
        /// </summary>

        /// <remarks>
        /// Returns a listing of all files in a music directory. Typically used to get list of albums for an artist, or list of songs for an album.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetMusicDirectoryResponse> PostGetMusicDirectoryAsync(Body33 body);

        /// <summary>
        /// Returns all configured top-level music folders.
        /// </summary>

        /// <remarks>
        /// Returns all configured top-level music folders. Takes no extra parameters.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetMusicFoldersResponse> GetMusicFoldersAsync();

        /// <summary>
        /// Returns all configured top-level music folders.
        /// </summary>

        /// <remarks>
        /// Returns all configured top-level music folders. Takes no extra parameters.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetMusicFoldersResponse> PostGetMusicFoldersAsync(object body);

        /// <summary>
        /// Returns the most recently published Podcast episodes.
        /// </summary>

        /// <remarks>
        /// Returns the most recently published Podcast episodes.
        /// </remarks>

        /// <param name="count">The maximum number of episodes to return.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetNewestPodcastsResponse> GetNewestPodcastsAsync(int count);

        /// <summary>
        /// Returns the most recently published Podcast episodes.
        /// </summary>

        /// <remarks>
        /// Returns the most recently published Podcast episodes.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetNewestPodcastsResponse> PostGetNewestPodcastsAsync(Body34 body);

        /// <summary>
        /// Returns what is currently being played by all users.
        /// </summary>

        /// <remarks>
        /// Returns what is currently being played by all users. Takes no extra parameters.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetNowPlayingResponse> GetNowPlayingAsync();

        /// <summary>
        /// Returns what is currently being played by all users.
        /// </summary>

        /// <remarks>
        /// Returns what is currently being played by all users. Takes no extra parameters.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetNowPlayingResponse> PostGetNowPlayingAsync(object body);

        /// <summary>
        /// List the OpenSubsonic extensions supported by this server.
        /// </summary>

        /// <remarks>
        /// List the OpenSubsonic extensions supported by this server.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetOpenSubsonicExtensionsResponse> GetOpenSubsonicExtensionsAsync();

        /// <summary>
        /// List the OpenSubsonic extensions supported by this server.
        /// </summary>

        /// <remarks>
        /// List the OpenSubsonic extensions supported by this server.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetOpenSubsonicExtensionsResponse> PostGetOpenSubsonicExtensionsAsync(object body);

        /// <summary>
        /// Returns a listing of files in a saved playlist.
        /// </summary>

        /// <remarks>
        /// Returns a listing of files in a saved playlist.
        /// </remarks>

        /// <param name="id">ID of the playlist to return, as obtained by `getPlaylists`.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetPlaylistResponse> GetPlaylistAsync(string id);

        /// <summary>
        /// Returns a listing of files in a saved playlist.
        /// </summary>

        /// <remarks>
        /// Returns a listing of files in a saved playlist.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetPlaylistResponse> PostGetPlaylistAsync(Body35 body);

        /// <summary>
        /// Returns all playlists a user is allowed to play.
        /// </summary>

        /// <remarks>
        /// Returns all playlists a user is allowed to play.
        /// </remarks>

        /// <param name="username">(Since 1.8.0) If specified, return playlists for this user rather than for the authenticated user. The authenticated user must have admin role if this parameter is used.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetPlaylistsResponse> GetPlaylistsAsync(string username);

        /// <summary>
        /// Returns all playlists a user is allowed to play.
        /// </summary>

        /// <remarks>
        /// Returns all playlists a user is allowed to play.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetPlaylistsResponse> PostGetPlaylistsAsync(Body36 body);

        /// <summary>
        /// Returns the state of the play queue for this user.
        /// </summary>

        /// <remarks>
        /// Returns the state of the play queue for this user (as set by savePlayQueue). This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book).
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetPlayQueueResponse> GetPlayQueueAsync();

        /// <summary>
        /// Returns the state of the play queue for this user.
        /// </summary>

        /// <remarks>
        /// Returns the state of the play queue for this user (as set by savePlayQueue). This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetPlayQueueResponse> PostGetPlayQueueAsync(object body);

        /// <summary>
        /// Returns the state of the play queue for this user, using queue index.
        /// </summary>

        /// <remarks>
        /// Returns the state of the play queue for this user (as set by savePlayQueue). This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book).
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetPlayQueueByIndexResponse> GetPlayQueueByIndexAsync();

        /// <summary>
        /// Returns the state of the play queue for this user.
        /// </summary>

        /// <remarks>
        /// Returns the state of the play queue for this user (as set by savePlayQueue). This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetPlayQueueByIndexResponse> PostGetPlayQueueByIndexAsync(object body);

        /// <summary>
        /// Returns details for a podcast episode.
        /// </summary>

        /// <remarks>
        /// OpenSubsonic extension name getPodcastEpisode (As returned by `getOpenSubsonicExtensions`). Returns details for a podcast episode.
        /// </remarks>

        /// <param name="id">The podcast episode ID.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetPodcastEpisodeResponse> GetPodcastEpisodeAsync(string id);

        /// <summary>
        /// Returns details for a podcast episode.
        /// </summary>

        /// <remarks>
        /// OpenSubsonic extension name `getPodcastEpisode` (As returned by `getOpenSubsonicExtensions`). Returns details for a podcast episode.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetPodcastEpisodeResponse> PostGetPodcastEpisodeAsync(Body37 body);

        /// <summary>
        /// Returns all Podcast channels the server subscribes to, and (optionally) their episodes.
        /// </summary>

        /// <remarks>
        /// Returns all Podcast channels the server subscribes to, and (optionally) their episodes. This method can also be used to return details for only one channel - refer to the id parameter. A typical use case for this method would be to first retrieve all channels without episodes, and then retrieve all episodes for the single channel the user selects.
        /// </remarks>

        /// <param name="id">(Since 1.9.0) If specified, only return the Podcast channel with this ID.</param>

        /// <param name="includeEpisodes">(Since 1.9.0) Whether to include Podcast episodes in the returned result.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetPodcastsResponse> GetPodcastsAsync(string id, bool includeEpisodes);

        /// <summary>
        /// Returns all Podcast channels the server subscribes to, and (optionally) their episodes.
        /// </summary>

        /// <remarks>
        /// Returns all Podcast channels the server subscribes to, and (optionally) their episodes. This method can also be used to return details for only one channel - refer to the id parameter. A typical use case for this method would be to first retrieve all channels without episodes, and then retrieve all episodes for the single channel the user selects.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetPodcastsResponse> PostGetPodcastsAsync(Body38 body);

        /// <summary>
        /// Returns random songs matching the given criteria.
        /// </summary>

        /// <remarks>
        /// Returns random songs matching the given criteria.
        /// </remarks>

        /// <param name="size">The maximum number of songs to return. Max 500.</param>

        /// <param name="genre">Only returns songs belonging to this genre.</param>

        /// <param name="fromYear">(Since 1.9.0) Only return songs from this year or later.</param>

        /// <param name="toYear">Only return songs published before or in this year.</param>

        /// <param name="musicFolderId">Only return songs in the music folder with the given ID. See `getMusicFolders`.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetRandomSongsResponse> GetRandomSongsAsync(int size, string genre, int? fromYear, int? toYear, string musicFolderId);

        /// <summary>
        /// Returns random songs matching the given criteria.
        /// </summary>

        /// <remarks>
        /// Returns random songs matching the given criteria.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetRandomSongsResponse> PostGetRandomSongsAsync(Body39 body);

        /// <summary>
        /// Returns the current status for media library scanning.
        /// </summary>

        /// <remarks>
        /// Returns the current status for media library scanning. Takes no extra parameters.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetScanStatusResponse> GetScanStatusAsync();

        /// <summary>
        /// Returns the current status for media library scanning.
        /// </summary>

        /// <remarks>
        /// Returns the current status for media library scanning. Takes no extra parameters.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetScanStatusResponse> PostGetScanStatusAsync(object body);

        /// <summary>
        /// Returns information about shared media this user is allowed to manage.
        /// </summary>

        /// <remarks>
        /// Returns information about shared media this user is allowed to manage. Takes no extra parameters.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetSharesResponse> GetSharesAsync();

        /// <summary>
        /// Returns information about shared media this user is allowed to manage.
        /// </summary>

        /// <remarks>
        /// Returns information about shared media this user is allowed to manage. Takes no extra parameters.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetSharesResponse> PostGetSharesAsync(object body);

        /// <summary>
        /// Returns a random collection of songs from the given artist and similar artists.
        /// </summary>

        /// <remarks>
        /// Returns a random collection of songs from the given artist and similar artists, using data from last.fm. Typically used for artist radio features.
        /// </remarks>

        /// <param name="id">The artist, album or song ID.</param>

        /// <param name="count">Max number of songs to return.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetSimilarSongsResponse> GetSimilarSongsAsync(string id, int count);

        /// <summary>
        /// Returns a random collection of songs from the given artist and similar artists.
        /// </summary>

        /// <remarks>
        /// Returns a random collection of songs from the given artist and similar artists, using data from last.fm. Typically used for artist radio features.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetSimilarSongsResponse> PostGetSimilarSongsAsync(Body40 body);

        /// <summary>
        /// Returns a random collection of songs from the given artist and similar artists (v2).
        /// </summary>

        /// <remarks>
        /// Similar to `getSimilarSongs`, but organizes music according to ID3 tags.
        /// </remarks>

        /// <param name="id">The artist, album or song ID.</param>

        /// <param name="count">Max number of songs to return.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetSimilarSongs2Response> GetSimilarSongs2Async(string id, int count);

        /// <summary>
        /// Returns a random collection of songs from the given artist and similar artists (v2).
        /// </summary>

        /// <remarks>
        /// Similar to `getSimilarSongs`, but organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetSimilarSongs2Response> PostGetSimilarSongs2Async(Body41 body);

        /// <summary>
        /// Returns details for a song.
        /// </summary>

        /// <remarks>
        /// Returns details for a song.
        /// </remarks>

        /// <param name="id">The song ID.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetSongResponse> GetSongAsync(string id);

        /// <summary>
        /// Returns details for a song.
        /// </summary>

        /// <remarks>
        /// Returns details for a song.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetSongResponse> PostGetSongAsync(Body42 body);

        /// <summary>
        /// Returns songs in a given genre.
        /// </summary>

        /// <remarks>
        /// Returns songs in a given genre.
        /// </remarks>

        /// <param name="genre">The genre, as returned by `getGenres`.</param>

        /// <param name="count">The maximum number of songs to return. Max 500.</param>

        /// <param name="offset">The offset. Useful if you want to page through the songs in a genre.</param>

        /// <param name="musicFolderId">(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetSongsByGenreResponse> GetSongsByGenreAsync(string genre, int count, int offset, string musicFolderId);

        /// <summary>
        /// Returns songs in a given genre.
        /// </summary>

        /// <remarks>
        /// Returns songs in a given genre.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetSongsByGenreResponse> PostGetSongsByGenreAsync(Body43 body);

        /// <summary>
        /// Returns starred songs, albums and artists.
        /// </summary>

        /// <remarks>
        /// Returns starred songs, albums and artists.
        /// </remarks>

        /// <param name="musicFolderId">(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetStarredResponse> GetStarredAsync(string musicFolderId);

        /// <summary>
        /// Returns starred songs, albums and artists.
        /// </summary>

        /// <remarks>
        /// Returns starred songs, albums and artists.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetStarredResponse> PostGetStarredAsync(object body);

        /// <summary>
        /// Returns starred songs, albums and artists.
        /// </summary>

        /// <remarks>
        /// Similar to `getStarred`, but organizes music according to ID3 tags.
        /// </remarks>

        /// <param name="musicFolderId">(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetStarred2Response> GetStarred2Async(string musicFolderId);

        /// <summary>
        /// Returns starred songs, albums and artists.
        /// </summary>

        /// <remarks>
        /// Similar to `getStarred`, but organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetStarred2Response> PostGetStarred2Async(object body);

        /// <summary>
        /// Returns top songs for the given artist.
        /// </summary>

        /// <remarks>
        /// Returns top songs for the given artist, using data from last.fm.
        /// </remarks>

        /// <param name="id">The artist name.</param>

        /// <param name="count">The maximum number of songs to return.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetTopSongsResponse> GetTopSongsAsync(string id, int count);

        /// <summary>
        /// Returns top songs for the given artist.
        /// </summary>

        /// <remarks>
        /// Returns top songs for the given artist, using data from last.fm.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetTopSongsResponse> PostGetTopSongsAsync(Body44 body);

        /// <summary>
        /// Get details about a given user, including which authorization roles and folder access it has.
        /// </summary>

        /// <remarks>
        /// Get details about a given user, including which authorization roles and folder access it has. Can be used to enable/disable certain features in the client, such as jukebox control.
        /// </remarks>

        /// <param name="username">The name of the user to retrieve. You can only retrieve your own user unless you have admin privileges.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetUserResponse> GetUserAsync(string username);

        /// <summary>
        /// Get details about a given user, including which authorization roles and folder access it has.
        /// </summary>

        /// <remarks>
        /// Get details about a given user, including which authorization roles and folder access it has. Can be used to enable/disable certain features in the client, such as jukebox control.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetUserResponse> PostGetUserAsync(Body45 body);

        /// <summary>
        /// Get details about all users, including which authorization roles and folder access they have
        /// </summary>

        /// <remarks>
        /// Get details about all users, including which authorization roles and folder access they have. Only users with admin privileges are allowed to call this method.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetUsersResponse> GetUsersAsync();

        /// <summary>
        /// Get details about all users, including which authorization roles and folder access they have
        /// </summary>

        /// <remarks>
        /// Get details about all users, including which authorization roles and folder access they have. Only users with admin privileges are allowed to call this method.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetUsersResponse> PostGetUsersAsync(object body);

        /// <summary>
        /// Returns details for a video.
        /// </summary>

        /// <remarks>
        /// Returns details for a video, including information about available audio tracks, subtitles (captions) and conversions.
        /// </remarks>

        /// <param name="id">The video ID.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetVideoInfoResponse> GetVideoInfoAsync(string id);

        /// <summary>
        /// Returns details for a video.
        /// </summary>

        /// <remarks>
        /// Returns details for a video, including information about available audio tracks, subtitles (captions) and conversions.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetVideoInfoResponse> PostGetVideoInfoAsync(Body46 body);

        /// <summary>
        /// Returns all video files.
        /// </summary>

        /// <remarks>
        /// Returns all video files.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetVideosResponse> GetVideosAsync();

        /// <summary>
        /// Returns all video files.
        /// </summary>

        /// <remarks>
        /// Returns all video files.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetVideosResponse> PostGetVideosAsync(object body);

        /// <summary>
        /// Downloads a given media file (HLS).
        /// </summary>

        /// <remarks>
        /// Creates an HLS (HTTP Live Streaming) playlist used for streaming video or audio. HLS is a streaming protocol implemented by Apple and works by breaking the overall stream into a sequence of small HTTP-based file downloads. It’s supported by iOS and newer versions of Android. This method also supports adaptive bitrate streaming, see the bitRate parameter.
        /// </remarks>

        /// <param name="id">A string which uniquely identifies the media file to stream.</param>

        /// <param name="bitRate">If specified, the server will attempt to limit the bitrate to this value, in kilobits per second. If this parameter is specified more than once, the server will create a variant playlist, suitable for adaptive bitrate streaming. The playlist will support streaming at all the specified bitrates. The server will automatically choose video dimensions that are suitable for the given bitrates. Since 1.9.0 you may explicitly request a certain width (480) and height (360) like so: bitRate=1000@480x360</param>

        /// <param name="audioTrack">The ID of the audio track to use. See `getVideoInfo` for how to get the list of available audio tracks for a video.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<string> Hls_m3u8Async(string id, int? bitRate, string audioTrack);

        /// <summary>
        /// Downloads a given media file (HLS).
        /// </summary>

        /// <remarks>
        /// Creates an HLS (HTTP Live Streaming) playlist used for streaming video or audio. HLS is a streaming protocol implemented by Apple and works by breaking the overall stream into a sequence of small HTTP-based file downloads. It’s supported by iOS and newer versions of Android. This method also supports adaptive bitrate streaming, see the bitRate parameter.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<string> PostHls_m3u8Async(Body47 body);

        /// <summary>
        /// Controls the jukebox, i.e., playback directly on the server’s audio hardware.
        /// </summary>

        /// <remarks>
        /// Controls the jukebox, i.e., playback directly on the server’s audio hardware. Note: The user must be authorized to control the jukebox (see Settings &gt; Users &gt; User is allowed to play files in jukebox mode).
        /// </remarks>

        /// <param name="action">The operation to perform. Must be one of: get, status (since 1.7.0), set (since 1.7.0), start, stop, skip, add, clear, remove, shuffle, setGain</param>

        /// <param name="index">Used by `skip` and `remove`. Zero-based index of the song to skip to or remove.</param>

        /// <param name="offset">(Since 1.7.0) Used by `skip`. Start playing this many seconds into the track.</param>

        /// <param name="id">Used by `add` and `set`. ID of song to add to the jukebox playlist. Use multiple id parameters to add many songs in the same request. (set is similar to a clear followed by a add, but will not change the currently playing track.)</param>

        /// <param name="gain">Used by `setGain` to control the playback volume. A float value between 0.0 and 1.0.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<JukeboxControlResponse> JukeboxControlAsync(JukeboxAction action, int? index, int? offset, System.Collections.Generic.IEnumerable<string> id, float? gain);

        /// <summary>
        /// Controls the jukebox, i.e., playback directly on the server’s audio hardware.
        /// </summary>

        /// <remarks>
        /// Controls the jukebox, i.e., playback directly on the server’s audio hardware. Note: The user must be authorized to control the jukebox (see Settings &gt; Users &gt; User is allowed to play files in jukebox mode).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<JukeboxControlResponse> PostJukeboxControlAsync(Body48 body);

        /// <summary>
        /// Used to test connectivity with the server.
        /// </summary>

        /// <remarks>
        /// Test connectivity with the server.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PingAsync();

        /// <summary>
        /// Used to test connectivity with the server.
        /// </summary>

        /// <remarks>
        /// Test connectivity with the server.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostPingAsync(object body);

        /// <summary>
        /// Requests the server to check for new Podcast episodes.
        /// </summary>

        /// <remarks>
        /// Requests the server to check for new Podcast episodes. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> RefreshPodcastsAsync();

        /// <summary>
        /// Requests the server to check for new Podcast episodes.
        /// </summary>

        /// <remarks>
        /// Requests the server to check for new Podcast episodes. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostRefreshPodcastsAsync(object body);

        /// <summary>
        /// Saves the state of the play queue for this user.
        /// </summary>

        /// <remarks>
        /// Saves the state of the play queue for this user. This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book). `id` is optional. Send a call without any parameters to clear the currently saved queue.
        /// </remarks>

        /// <param name="id">ID of a song in the play queue. Use one id parameter for each song in the play queue.</param>

        /// <param name="current">The ID of the current playing song.</param>

        /// <param name="position">The position in milliseconds within the currently playing song.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> SavePlayQueueAsync(string id, string current, int? position);

        /// <summary>
        /// Saves the state of the play queue for this user.
        /// </summary>

        /// <remarks>
        /// Saves the state of the play queue for this user. This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book). `id` is optional. Send a call without any parameters to clear the currently saved queue.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostSavePlayQueueAsync(Body49 body);

        /// <summary>
        /// Saves the state of the play queue for this user, using queue index.
        /// </summary>

        /// <remarks>
        /// Saves the state of the play queue for this user. This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book). `id` is optional. Send a call without any parameters to clear the currently saved queue.
        /// </remarks>

        /// <param name="id">ID of a song in the play queue. Use one id parameter for each song in the play queue.</param>

        /// <param name="currentIndex">The index of the current playing song.</param>

        /// <param name="position">The position in milliseconds within the currently playing song.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> SavePlayQueueByIndexAsync(string id, int? currentIndex, int? position);

        /// <summary>
        /// Saves the state of the play queue for this user.
        /// </summary>

        /// <remarks>
        /// Saves the state of the play queue for this user. This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book). `id` is optional. Send a call without any parameters to clear the currently saved queue.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostSavePlayQueueByIndexAsync(Body50 body);

        /// <summary>
        /// Registers the local playback of one or more media files.
        /// </summary>

        /// <remarks>
        /// Registers the local playback of one or more media files. Typically used when playing media that is cached on the client. This operation includes the following:
        /// <br/>
        /// <br/>* “Scrobbles” the media files on last.fm if the user has configured his/her last.fm credentials on the server.
        /// <br/>* Updates the play count and last played timestamp for the media files. (Since 1.11.0)
        /// <br/>* Makes the media files appear in the “Now playing” page in the web app, and appear in the list of songs returned by getNowPlaying (Since 1.11.0)
        /// <br/>
        /// <br/>Since 1.8.0 you may specify multiple id (and optionally time) parameters to scrobble multiple files.
        /// </remarks>

        /// <param name="id">A string which uniquely identifies the file to scrobble.</param>

        /// <param name="time">(Since 1.8.0) The time (in milliseconds since 1 Jan 1970) at which the song was listened to.</param>

        /// <param name="submission">Whether this is a “submission” or a “now playing” notification.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> ScrobbleAsync(string id, int? time, bool submission);

        /// <summary>
        /// Registers the local playback of one or more media files.
        /// </summary>

        /// <remarks>
        /// Registers the local playback of one or more media files. Typically used when playing media that is cached on the client. This operation includes the following:
        /// <br/>
        /// <br/>* “Scrobbles” the media files on last.fm if the user has configured his/her last.fm credentials on the server.
        /// <br/>* Updates the play count and last played timestamp for the media files. (Since 1.11.0)
        /// <br/>* Makes the media files appear in the “Now playing” page in the web app, and appear in the list of songs returned by getNowPlaying (Since 1.11.0)
        /// <br/>
        /// <br/>Since 1.8.0 you may specify multiple id (and optionally time) parameters to scrobble multiple files.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostScrobbleAsync(Body51 body);

        /// <summary>
        /// Returns a listing of files matching the given search criteria. Supports paging through the result.
        /// </summary>

        /// <remarks>
        /// Deprecated since 1.4.0, use search2 instead.
        /// <br/>
        /// <br/>Returns a listing of files matching the given search criteria. Supports paging through the result.
        /// </remarks>

        /// <param name="artist">Artist to search for.</param>

        /// <param name="album">Album to search for.</param>

        /// <param name="title">Song title to search for.</param>

        /// <param name="any">Searches all fields.</param>

        /// <param name="count">Maximum number of results to return.</param>

        /// <param name="offset">Search result offset. Used for paging.</param>

        /// <param name="newerThan">Only return matches that are newer than this. Given as milliseconds since 1970.</param>

        /// <returns>Successful or failed response</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<SearchResponse> SearchAsync(string artist, string album, string title, bool? any, int count, int offset, int? newerThan);

        /// <summary>
        /// Returns a listing of files matching the given search criteria. Supports paging through the result.
        /// </summary>

        /// <remarks>
        /// Deprecated since 1.4.0, use search2 instead.
        /// <br/>
        /// <br/>Returns a listing of files matching the given search criteria. Supports paging through the result.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        [System.Obsolete]

        System.Threading.Tasks.Task<SearchResponse> PostSearchAsync(Body52 body);

        /// <summary>
        /// Returns a listing of files matching the given search criteria. Supports paging through the result. (v2)
        /// </summary>

        /// <remarks>
        /// Returns albums, artists and songs matching the given search criteria. Supports paging through the result.
        /// </remarks>

        /// <param name="query">Search query.</param>

        /// <param name="artistCount">Maximum number of artists to return.</param>

        /// <param name="artistOffset">Search result offset for artists. Used for paging.</param>

        /// <param name="albumCount">Maximum number of albums to return.</param>

        /// <param name="albumOffset">Search result offset for albums. Used for paging.</param>

        /// <param name="songCount">Maximum number of songs to return.</param>

        /// <param name="songOffset">Search result offset for songs. Used for paging.</param>

        /// <param name="musicFolderId">(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<Search2Response> Search2Async(string query, int artistCount, int artistOffset, int albumCount, int albumOffset, int songCount, int songOffset, string musicFolderId);

        /// <summary>
        /// Returns a listing of files matching the given search criteria. Supports paging through the result. (v2)
        /// </summary>

        /// <remarks>
        /// Returns albums, artists and songs matching the given search criteria. Supports paging through the result.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<Search2Response> PostSearch2Async(Body53 body);

        /// <summary>
        /// Returns albums, artists and songs matching the given search criteria. Supports paging through the result. (v3)
        /// </summary>

        /// <remarks>
        /// Returns albums, artists and songs matching the given search criteria. Supports paging through the result.
        /// <br/>
        /// <br/>Music is organized according to ID3 tags.
        /// </remarks>

        /// <param name="query">Search query. Servers must support an empty query and return all the data to allow clients to properly access all the media information for offline sync.</param>

        /// <param name="artistCount">Maximum number of artists to return.</param>

        /// <param name="artistOffset">Search result offset for artists. Used for paging.</param>

        /// <param name="albumCount">Maximum number of albums to return.</param>

        /// <param name="albumOffset">Search result offset for albums. Used for paging.</param>

        /// <param name="songCount">Maximum number of songs to return.</param>

        /// <param name="songOffset">Search result offset for songs. Used for paging.</param>

        /// <param name="musicFolderId">(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<Search3Response> Search3Async(string query, int artistCount, int artistOffset, int albumCount, int albumOffset, int songCount, int songOffset, string musicFolderId);

        /// <summary>
        /// Returns albums, artists and songs matching the given search criteria. Supports paging through the result. (v3)
        /// </summary>

        /// <remarks>
        /// Returns albums, artists and songs matching the given search criteria. Supports paging through the result.
        /// <br/>
        /// <br/>Music is organized according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<Search3Response> PostSearch3Async(Body54 body);

        /// <summary>
        /// Sets the rating for a music file.
        /// </summary>

        /// <remarks>
        /// Sets the rating for a music file.
        /// </remarks>

        /// <param name="id">A string which uniquely identifies the file (song) or folder (album/artist) to rate.</param>

        /// <param name="rating">The rating between 1 and 5 (inclusive), or 0 to remove the rating.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> SetRatingAsync(string id, int rating);

        /// <summary>
        /// Sets the rating for a music file.
        /// </summary>

        /// <remarks>
        /// Sets the rating for a music file.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostSetRatingAsync(Body55 body);

        /// <summary>
        /// Attaches a star to a song, album or artist.
        /// </summary>

        /// <remarks>
        /// Attaches a star to a song, album or artist.
        /// </remarks>

        /// <param name="id">The ID of the file (song) or folder (album/artist) to star. Multiple parameters allowed.</param>

        /// <param name="albumId">The ID of an album to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.</param>

        /// <param name="artistId">The ID of an artist to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> StarAsync(System.Collections.Generic.IEnumerable<string> id, System.Collections.Generic.IEnumerable<string> albumId, System.Collections.Generic.IEnumerable<string> artistId);

        /// <summary>
        /// Attaches a star to a song, album or artist.
        /// </summary>

        /// <remarks>
        /// Attaches a star to a song, album or artist.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostStarAsync(Body56 body);

        /// <summary>
        /// Initiates a rescan of the media libraries.
        /// </summary>

        /// <remarks>
        /// Initiates a rescan of the media libraries. Takes no extra parameters.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<StartScanResponse> StartScanAsync();

        /// <summary>
        /// Initiates a rescan of the media libraries.
        /// </summary>

        /// <remarks>
        /// Initiates a rescan of the media libraries. Takes no extra parameters.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<StartScanResponse> PostStartScanAsync(object body);

        /// <summary>
        /// Streams a given media file.
        /// </summary>

        /// <remarks>
        /// Streams a given media file.
        /// <br/>
        /// <br/>OpenSubsonic servers must not count access to this endpoint as a play and increase playcount. Clients can use the Scrobble endpoint to indicate that a media is played ensuring proper data in all cases.
        /// <br/>
        /// <br/>If the server support the Transcode Offet extension, then it must accept the timeOffset parameter for music too.
        /// </remarks>

        /// <param name="id">A string which uniquely identifies the file to stream. Obtained by calls to getMusicDirectory.</param>

        /// <param name="maxBitRate">(Since 1.2.0) If specified, the server will attempt to limit the bitrate to this value, in kilobits per second. If set to zero, no limit is imposed.</param>

        /// <param name="format">(Since 1.6.0) Specifies the preferred target format (e.g., “mp3” or “flv”) in case there are multiple applicable transcodings. Starting with 1.9.0 you can use the special value “raw” to disable transcoding.</param>

        /// <param name="timeOffset">By default only applicable to video streaming. If specified, start streaming at the given offset (in seconds) into the media. The `Transcode Offset` extension enables the parameter to music too.</param>

        /// <param name="size">(Since 1.6.0) Only applicable to video streaming. Requested video size specified as WxH, for instance “640x480”.</param>

        /// <param name="estimateContentLength">(Since 1.8.0). If set to “true”, the Content-Length HTTP header will be set to an estimated value for transcoded or downsampled media.</param>

        /// <param name="converted">(Since 1.14.0) Only applicable to video streaming. Servers can optimize videos for streaming by converting them to MP4. If a conversion exists for the video in question, then setting this parameter to “true” will cause the converted video to be returned instead of the original.</param>

        /// <returns>Success (binary) or error (xml) response</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> StreamAsync(string id, int? maxBitRate, string format, int? timeOffset, string size, bool estimateContentLength, bool converted);

        /// <summary>
        /// Streams a given media file.
        /// </summary>

        /// <remarks>
        /// Streams a given media file.
        /// <br/>
        /// <br/>OpenSubsonic servers must not count access to this endpoint as a play and increase playcount. Clients can use the Scrobble endpoint to indicate that a media is played ensuring proper data in all cases.
        /// <br/>
        /// <br/>If the server supports the Transcode Offset extension, then it must accept the timeOffset parameter for music too.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Success (binary) or error (xml) response</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> PostStreamAsync(Body57 body);

        /// <summary>
        /// Returns information about an API key
        /// </summary>

        /// <remarks>
        /// OpenSubsonic extension name `apiKeyAuthentication` (As returned by `getOpenSubsonicExtensions`). Returns data about an API key.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetTokenInfoResponse> TokenInfoAsync();

        /// <summary>
        /// Returns information about an API key
        /// </summary>

        /// <remarks>
        /// OpenSubsonic extension name `apiKeyAuthentication` (As returned by `getOpenSubsonicExtensions`). Returns data about an API key.
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<GetTokenInfoResponse> PostTokenInfoAsync(object body);

        /// <summary>
        /// Removes a star to a song, album or artist.
        /// </summary>

        /// <remarks>
        /// Removes a star to a song, album or artist.
        /// </remarks>

        /// <param name="id">The ID of the file (song) or folder (album/artist) to star. Multiple parameters allowed.</param>

        /// <param name="albumId">The ID of an album to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.</param>

        /// <param name="artistId">The ID of an artist to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> UnstarAsync(System.Collections.Generic.IEnumerable<string> id, System.Collections.Generic.IEnumerable<string> albumId, System.Collections.Generic.IEnumerable<string> artistId);

        /// <summary>
        /// Removes a star to a song, album or artist.
        /// </summary>

        /// <remarks>
        /// Removes a star to a song, album or artist.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostUnstarAsync(Body58 body);

        /// <summary>
        /// Updates an existing internet radio station.
        /// </summary>

        /// <remarks>
        /// Updates an existing internet radio station. Only users with admin privileges are allowed to call this method.
        /// </remarks>

        /// <param name="id">The ID of the station.</param>

        /// <param name="streamUrl">The stream URL for the station.</param>

        /// <param name="name">The user-defined name for the station.</param>

        /// <param name="homepageUrl">The home page URL for the station.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> UpdateInternetRadioStationAsync(string id, string streamUrl, string name, string homepageUrl);

        /// <summary>
        /// Updates an existing internet radio station.
        /// </summary>

        /// <remarks>
        /// Updates an existing internet radio station. Only users with admin privileges are allowed to call this method.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostUpdateInternetRadioStationAsync(Body59 body);

        /// <summary>
        /// Updates a playlist. Only the owner of a playlist is allowed to update it.
        /// </summary>

        /// <remarks>
        /// Updates a playlist. Only the owner of a playlist is allowed to update it.
        /// </remarks>

        /// <param name="playlistId">The playlist ID.</param>

        /// <param name="name">The human-readable name of the playlist.</param>

        /// <param name="comment">The playlist comment.</param>

        /// <param name="@public">`true` if the playlist should be visible to all users, `false` otherwise.</param>

        /// <param name="songIdToAdd">Add this song with this ID to the playlist. Multiple parameters allowed.</param>

        /// <param name="songIndexToRemove">Remove the song at this position in the playlist. Multiple parameters allowed.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> UpdatePlaylistAsync(string playlistId, string name, string comment, bool? @public, System.Collections.Generic.IEnumerable<string> songIdToAdd, System.Collections.Generic.IEnumerable<int> songIndexToRemove);

        /// <summary>
        /// Updates a playlist. Only the owner of a playlist is allowed to update it.
        /// </summary>

        /// <remarks>
        /// Updates a playlist. Only the owner of a playlist is allowed to update it.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostUpdatePlaylistAsync(Body60 body);

        /// <summary>
        /// Updates the description and/or expiration date for an existing share.
        /// </summary>

        /// <remarks>
        /// Updates the description and/or expiration date for an existing share.
        /// </remarks>

        /// <param name="id">ID of the share to update.</param>

        /// <param name="description">A user-defined description that will be displayed to people visiting the shared media.</param>

        /// <param name="expires">The time at which the share expires. Given as milliseconds since 1970, or zero to remove the expiration.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> UpdateShareAsync(string id, string description, int? expires);

        /// <summary>
        /// Updates the description and/or expiration date for an existing share.
        /// </summary>

        /// <remarks>
        /// Updates the description and/or expiration date for an existing share.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostUpdateShareAsync(Body61 body);

        /// <summary>
        /// Modifies an existing user on the server.
        /// </summary>

        /// <remarks>
        /// Modifies an existing user on the server.
        /// </remarks>

        /// <param name="username">The name of the user.</param>

        /// <param name="password">The password of the user, either in clear text of hex-encoded (see above).</param>

        /// <param name="email">The email address of the user.</param>

        /// <param name="ldapAuthenticated">Whether the user is authenicated in LDAP.</param>

        /// <param name="adminRole">Whether the user is administrator.</param>

        /// <param name="settingsRole">Whether the user is allowed to change personal settings and password.</param>

        /// <param name="streamRole">Whether the user is allowed to play files.</param>

        /// <param name="jukeboxRole">Whether the user is allowed to play files in jukebox mode.</param>

        /// <param name="downloadRole">Whether the user is allowed to download files.</param>

        /// <param name="uploadRole">Whether the user is allowed to upload files.</param>

        /// <param name="coverArtRole">Whether the user is allowed to change cover art and tags.</param>

        /// <param name="commentRole">Whether the user is allowed to create and edit comments and ratings.</param>

        /// <param name="podcastRole">Whether the user is allowed to administrate Podcasts.</param>

        /// <param name="shareRole">Whether the user is allowed to share files with anyone.</param>

        /// <param name="videoConversionRole">(Since 1.15.0) Whether the user is allowed to start video conversions.</param>

        /// <param name="musicFolderId">(Since 1.12.0) IDs of the music folders the user is allowed access to. Include the parameter once for each folder.</param>

        /// <param name="maxBitRate">(Since 1.13.0) The maximum bit rate (in Kbps) for the user. Audio streams of higher bit rates are automatically downsampled to this bit rate. Legal values: 0 (no limit), 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320.</param>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> UpdateUserAsync(string username, string password, string email, bool ldapAuthenticated, bool adminRole, bool settingsRole, bool streamRole, bool jukeboxRole, bool downloadRole, bool uploadRole, bool coverArtRole, bool commentRole, bool podcastRole, bool shareRole, bool videoConversionRole, System.Collections.Generic.IEnumerable<string> musicFolderId, MaxBitRate? maxBitRate);

        /// <summary>
        /// Modifies an existing user on the server.
        /// </summary>

        /// <remarks>
        /// Modifies an existing user on the server.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>

        /// <returns>Successful or failed response</returns>

        System.Threading.Tasks.Task<SubsonicResponse> PostUpdateUserAsync(Body62 body);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class Controller : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IController _implementation;

        public Controller(IController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Adds a message to the chat log.
        /// </summary>
        /// <remarks>
        /// Adds a message to the chat log.
        /// </remarks>
        /// <param name="message">The chat message.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/addChatMessage")]
        public System.Threading.Tasks.Task<SubsonicResponse> GetAddChatMessage([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string message)
        {

            return _implementation.GetAddChatMessageAsync(message);
        }

        /// <summary>
        /// Adds a message to the chat log.
        /// </summary>
        /// <remarks>
        /// Adds a message to the chat log.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/addChatMessage")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostAddChatMessage([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body body)
        {

            return _implementation.PostAddChatMessageAsync(body);
        }

        /// <summary>
        /// Changes the password of an existing user on the server.
        /// </summary>
        /// <remarks>
        /// Changes the password of an existing user on the server, using the following parameters. You can only change your own password unless you have admin privileges.
        /// </remarks>
        /// <param name="username">The name of the user which should change its password.</param>
        /// <param name="password">The new password of the new user, either in clear text of hex-encoded (see above).</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/changePassword")]
        public System.Threading.Tasks.Task<SubsonicResponse> ChangePassword([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string username, [Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string password)
        {

            return _implementation.ChangePasswordAsync(username, password);
        }

        /// <summary>
        /// Changes the password of an existing user on the server.
        /// </summary>
        /// <remarks>
        /// Changes the password of an existing user on the server, using the following parameters. You can only change your own password unless you have admin privileges.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/changePassword")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostChangePassword([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body2 body)
        {

            return _implementation.PostChangePasswordAsync(body);
        }

        /// <summary>
        /// Creates or updates a bookmark.
        /// </summary>
        /// <remarks>
        /// Creates or updates a bookmark (a position within a media file). Bookmarks are personal and not visible to other users.
        /// </remarks>
        /// <param name="id">ID of the media file to bookmark. If a bookmark already exists for this file it will be overwritten.</param>
        /// <param name="position">The position (in milliseconds) within the media file.</param>
        /// <param name="comment">A user-defined comment.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/createBookmark")]
        public System.Threading.Tasks.Task<SubsonicResponse> CreateBookmark([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id, [Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] int position, [Microsoft.AspNetCore.Mvc.FromQuery] string comment)
        {

            return _implementation.CreateBookmarkAsync(id, position, comment);
        }

        /// <summary>
        /// Creates or updates a bookmark.
        /// </summary>
        /// <remarks>
        /// Creates or updates a bookmark (a position within a media file). Bookmarks are personal and not visible to other users.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/createBookmark")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostCreateBookmark([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body3 body)
        {

            return _implementation.PostCreateBookmarkAsync(body);
        }

        /// <summary>
        /// Adds a new internet radio station.
        /// </summary>
        /// <remarks>
        /// Adds a new internet radio station. Only users with admin privileges are allowed to call this method.
        /// </remarks>
        /// <param name="streamUrl">The stream URL for the station.</param>
        /// <param name="name">The station name.</param>
        /// <param name="homepageUrl">The home page URL for the station.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/createInternetRadioStation")]
        public System.Threading.Tasks.Task<SubsonicResponse> CreateInternetRadioStation([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string streamUrl, [Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string name, [Microsoft.AspNetCore.Mvc.FromQuery] string homepageUrl)
        {

            return _implementation.CreateInternetRadioStationAsync(streamUrl, name, homepageUrl);
        }

        /// <summary>
        /// Adds a new internet radio station.
        /// </summary>
        /// <remarks>
        /// Adds a new internet radio station. Only users with admin privileges are allowed to call this method.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/createInternetRadioStation")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostCreateInternetRadioStation([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body4 body)
        {

            return _implementation.PostCreateInternetRadioStationAsync(body);
        }

        /// <summary>
        /// Creates (or updates) a playlist.
        /// </summary>
        /// <remarks>
        /// Creates (or updates) a playlist.
        /// </remarks>
        /// <param name="playlistId">The playlist ID. Required if updating an existing playlist.</param>
        /// <param name="name">The human-readable name of the playlist. Required if creating a new playlist.</param>
        /// <param name="songId">ID of a song in the playlist. Use one `songId` parameter for each song in the playlist.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/createPlaylist")]
        public System.Threading.Tasks.Task<CreatePlaylistResponse> CreatePlaylist([Microsoft.AspNetCore.Mvc.FromQuery] string playlistId, [Microsoft.AspNetCore.Mvc.FromQuery] string name, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> songId)
        {

            return _implementation.CreatePlaylistAsync(playlistId, name, songId);
        }

        /// <summary>
        /// Creates (or updates) a playlist.
        /// </summary>
        /// <remarks>
        /// Creates (or updates) a playlist.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/createPlaylist")]
        public System.Threading.Tasks.Task<CreatePlaylistResponse> PostCreatePlaylist([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body5 body)
        {

            return _implementation.PostCreatePlaylistAsync(body);
        }

        /// <summary>
        /// Adds a new Podcast channel.
        /// </summary>
        /// <remarks>
        /// Adds a new Podcast channel. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// </remarks>
        /// <param name="url">The URL of the Podcast to add.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/createPodcastChannel")]
        public System.Threading.Tasks.Task<SubsonicResponse> CreatePodcastChannel([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string url)
        {

            return _implementation.CreatePodcastChannelAsync(url);
        }

        /// <summary>
        /// Adds a new Podcast channel.
        /// </summary>
        /// <remarks>
        /// Adds a new Podcast channel. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/createPodcastChannel")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostCreatePodcastChannel([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body6 body)
        {

            return _implementation.PostCreatePodcastChannelAsync(body);
        }

        /// <summary>
        /// Creates a public URL that can be used by anyone to stream music or video from the server.
        /// </summary>
        /// <remarks>
        /// Creates a public URL that can be used by anyone to stream music or video from the server. The URL is short and suitable for posting on Facebook, Twitter etc. Note: The user must be authorized to share (see Settings &gt; Users &gt; User is allowed to share files with anyone). Since 1.6.0.
        /// </remarks>
        /// <param name="id">ID of a song, album or video to share. Use one id parameter for each entry to share.</param>
        /// <param name="description">A user-defined description that will be displayed to people visiting the shared media.</param>
        /// <param name="expires">The time at which the share expires. Given as milliseconds since 1970.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/createShare")]
        public System.Threading.Tasks.Task<CreateSharesResponse> CreateShare([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Collections.Generic.IEnumerable<string> id, [Microsoft.AspNetCore.Mvc.FromQuery] string description, [Microsoft.AspNetCore.Mvc.FromQuery] int? expires)
        {

            return _implementation.CreateShareAsync(id, description, expires);
        }

        /// <summary>
        /// Creates a public URL that can be used by anyone to stream music or video from the server.
        /// </summary>
        /// <remarks>
        /// Creates a public URL that can be used by anyone to stream music or video from the server. The URL is short and suitable for posting on Facebook, Twitter etc. Note: The user must be authorized to share (see Settings &gt; Users &gt; User is allowed to share files with anyone). Since 1.6.0.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`).
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/createShare")]
        public System.Threading.Tasks.Task<CreateSharesResponse> PostCreateShare([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body7 body)
        {

            return _implementation.PostCreateShareAsync(body);
        }

        /// <summary>
        /// Creates a new user on the server.
        /// </summary>
        /// <remarks>
        /// Creates a new user on the server.
        /// </remarks>
        /// <param name="username">The name of the new user.</param>
        /// <param name="password">The password of the new user, either in clear text of hex-encoded (see above).</param>
        /// <param name="email">The email address of the new user.</param>
        /// <param name="ldapAuthenticated">Whether the user is authenticated in LDAP.</param>
        /// <param name="adminRole">Whether the user is administrator.</param>
        /// <param name="settingsRole">Whether the user is allowed to change personal settings and password.</param>
        /// <param name="streamRole">Whether the user is allowed to play files.</param>
        /// <param name="jukeboxRole">Whether the user is allowed to play files in jukebox mode.</param>
        /// <param name="downloadRole">Whether the user is allowed to download files.</param>
        /// <param name="uploadRole">Whether the user is allowed to upload files.</param>
        /// <param name="playlistRole">Whether the user is allowed to create and delete playlists. Since 1.8.0, changing this role has no effect.</param>
        /// <param name="coverArtRole">Whether the user is allowed to change cover art and tags.</param>
        /// <param name="commentRole">Whether the user is allowed to create and edit comments and ratings.</param>
        /// <param name="podcastRole">Whether the user is allowed to administrate Podcasts.</param>
        /// <param name="shareRole">(Since 1.8.0) Whether the user is allowed to share files with anyone.</param>
        /// <param name="videoConversionRole">(Since 1.15.0) Whether the user is allowed to start video conversions.</param>
        /// <param name="musicFolderId">(Since 1.12.0) IDs of the music folders the user is allowed access to. Include the parameter once for each folder. Default all folders.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/createUser")]
        public System.Threading.Tasks.Task<SubsonicResponse> CreateUser([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string username, [Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string password, [Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string email, [Microsoft.AspNetCore.Mvc.FromQuery] bool? ldapAuthenticated, [Microsoft.AspNetCore.Mvc.FromQuery] bool? adminRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? settingsRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? streamRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? jukeboxRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? downloadRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? uploadRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? playlistRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? coverArtRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? commentRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? podcastRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? shareRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? videoConversionRole, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> musicFolderId)
        {

            return _implementation.CreateUserAsync(username, password, email, ldapAuthenticated ?? false, adminRole ?? false, settingsRole ?? true, streamRole ?? true, jukeboxRole ?? false, downloadRole ?? false, uploadRole ?? false, playlistRole ?? false, coverArtRole ?? false, commentRole ?? false, podcastRole ?? false, shareRole ?? false, videoConversionRole ?? false, musicFolderId);
        }

        /// <summary>
        /// Creates a new user on the server.
        /// </summary>
        /// <remarks>
        /// Creates a new user on the server.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/createUser")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostCreateUser([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body8 body)
        {

            return _implementation.PostCreateUserAsync(body);
        }

        /// <summary>
        /// Deletes a bookmark.
        /// </summary>
        /// <remarks>
        /// Deletes a bookmark (a position within a media file). Bookmarks are personal and not visible to other users.
        /// </remarks>
        /// <param name="id">ID of the media file for which to delete the bookmark. Other users’ bookmarks are not affected.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/deleteBookmark")]
        public System.Threading.Tasks.Task<SubsonicResponse> DeleteBookmark([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.DeleteBookmarkAsync(id);
        }

        /// <summary>
        /// Deletes a bookmark.
        /// </summary>
        /// <remarks>
        /// Deletes a bookmark (a position within a media file). Bookmarks are personal and not visible to other users.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/deleteBookmark")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostDeleteBookmark([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body9 body)
        {

            return _implementation.PostDeleteBookmarkAsync(body);
        }

        /// <summary>
        /// Deletes an existing internet radio station.
        /// </summary>
        /// <remarks>
        /// Deletes an existing internet radio station. Only users with admin privileges are allowed to call this method.
        /// </remarks>
        /// <param name="id">The ID for the station.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/deleteInternetRadioStation")]
        public System.Threading.Tasks.Task<SubsonicResponse> DeleteInternetRadioStation([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.DeleteInternetRadioStationAsync(id);
        }

        /// <summary>
        /// Deletes an existing internet radio station.
        /// </summary>
        /// <remarks>
        /// Deletes an existing internet radio station. Only users with admin privileges are allowed to call this method.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/deleteInternetRadioStation")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostDeleteInternetRadioStation([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body10 body)
        {

            return _implementation.PostDeleteInternetRadioStationAsync(body);
        }

        /// <summary>
        /// Deletes a saved playlist.
        /// </summary>
        /// <remarks>
        /// Deletes a saved playlist.
        /// </remarks>
        /// <param name="id">ID of the playlist to delete, as obtained by `getPlaylists`.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/deletePlaylist")]
        public System.Threading.Tasks.Task<SubsonicResponse> DeletePlaylist([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.DeletePlaylistAsync(id);
        }

        /// <summary>
        /// Deletes a saved playlist.
        /// </summary>
        /// <remarks>
        /// Deletes a saved playlist.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/deletePlaylist")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostDeletePlaylist([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body11 body)
        {

            return _implementation.PostDeletePlaylistAsync(body);
        }

        /// <summary>
        /// Deletes a Podcast channel.
        /// </summary>
        /// <remarks>
        /// Deletes a Podcast channel. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// </remarks>
        /// <param name="id">The ID of the Podcast channel to delete.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/deletePodcastChannel")]
        public System.Threading.Tasks.Task<SubsonicResponse> DeletePodcastChannel([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.DeletePodcastChannelAsync(id);
        }

        /// <summary>
        /// Deletes a Podcast channel.
        /// </summary>
        /// <remarks>
        /// Deletes a Podcast channel. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/deletePodcastChannel")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostDeletePodcastChannel([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body12 body)
        {

            return _implementation.PostDeletePodcastChannelAsync(body);
        }

        /// <summary>
        /// Deletes a Podcast episode.
        /// </summary>
        /// <remarks>
        /// Deletes a Podcast episode. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// </remarks>
        /// <param name="id">The ID of the Podcast episode to delete.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/deletePodcastEpisode")]
        public System.Threading.Tasks.Task<SubsonicResponse> DeletePodcastEpisode([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.DeletePodcastEpisodeAsync(id);
        }

        /// <summary>
        /// Deletes a Podcast episode.
        /// </summary>
        /// <remarks>
        /// Deletes a Podcast episode. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/deletePodcastEpisode")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostDeletePodcastEpisode([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body13 body)
        {

            return _implementation.PostDeletePodcastEpisodeAsync(body);
        }

        /// <summary>
        /// Deletes an existing share.
        /// </summary>
        /// <remarks>
        /// Deletes an existing share
        /// </remarks>
        /// <param name="id">ID of the share to delete.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/deleteShare")]
        public System.Threading.Tasks.Task<SubsonicResponse> DeleteShare([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.DeleteShareAsync(id);
        }

        /// <summary>
        /// Deletes an existing share.
        /// </summary>
        /// <remarks>
        /// Deletes an existing share.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/deleteShare")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostDeleteShare([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body14 body)
        {

            return _implementation.PostDeleteShareAsync(body);
        }

        /// <summary>
        /// Deletes an existing user on the server.
        /// </summary>
        /// <remarks>
        /// Deletes an existing user on the server.
        /// </remarks>
        /// <param name="username">The name of the user to delete.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/deleteUser")]
        public System.Threading.Tasks.Task<SubsonicResponse> DeleteUser([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string username)
        {

            return _implementation.DeleteUserAsync(username);
        }

        /// <summary>
        /// Deletes an existing user on the server.
        /// </summary>
        /// <remarks>
        /// Deletes an existing user on the server.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/deleteUser")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostDeleteUser([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body15 body)
        {

            return _implementation.PostDeleteUserAsync(body);
        }

        /// <summary>
        /// Downloads a given media file.
        /// </summary>
        /// <remarks>
        /// Downloads a given media file. Similar to stream, but this method returns the original media data without transcoding or downsampling.
        /// </remarks>
        /// <param name="id">A string which uniquely identifies the file to stream. Obtained by calls to getMusicDirectory.</param>
        /// <returns>Success (binary) or error (xml) response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/download")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> Download([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.DownloadAsync(id);
        }

        /// <summary>
        /// Downloads a given media file.
        /// </summary>
        /// <remarks>
        /// Downloads a given media file. Similar to stream, but this method returns the original media data without transcoding or downsampling.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Success (binary) or error (xml) response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/download")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> PostDownload([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body16 body)
        {

            return _implementation.PostDownloadAsync(body);
        }

        /// <summary>
        /// Request the server to start downloading a given Podcast episode.
        /// </summary>
        /// <remarks>
        /// Request the server to start downloading a given Podcast episode. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// </remarks>
        /// <param name="id">The ID of the Podcast episode to download</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/downloadPodcastEpisode")]
        public System.Threading.Tasks.Task<SubsonicResponse> DownloadPodcastEpisode([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.DownloadPodcastEpisodeAsync(id);
        }

        /// <summary>
        /// Request the server to start downloading a given Podcast episode.
        /// </summary>
        /// <remarks>
        /// Request the server to start downloading a given Podcast episode. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/downloadPodcastEpisode")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostDownloadPodcastEpisode([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body17 body)
        {

            return _implementation.PostDownloadPodcastEpisodeAsync(body);
        }

        /// <summary>
        /// Returns details for an album.
        /// </summary>
        /// <remarks>
        /// Returns details for an album, including a list of songs. This method organizes music according to ID3 tags.
        /// </remarks>
        /// <param name="id">The album ID.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getAlbum")]
        public System.Threading.Tasks.Task<GetAlbumResponse> GetAlbum([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.GetAlbumAsync(id);
        }

        /// <summary>
        /// Returns details for an album.
        /// </summary>
        /// <remarks>
        /// Returns details for an album, including a list of songs. This method organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getAlbum")]
        public System.Threading.Tasks.Task<GetAlbumResponse> PostGetAlbum([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body18 body)
        {

            return _implementation.PostGetAlbumAsync(body);
        }

        /// <summary>
        /// Returns album info.
        /// </summary>
        /// <remarks>
        /// Returns album notes, image URLs etc, using data from last.fm.
        /// </remarks>
        /// <param name="id">The album ID or song ID.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getAlbumInfo")]
        public System.Threading.Tasks.Task<GetAlbumInfoResponse> GetAlbumInfo([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.GetAlbumInfoAsync(id);
        }

        /// <summary>
        /// Returns album info.
        /// </summary>
        /// <remarks>
        /// Returns album notes, image URLs etc, using data from last.fm.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getAlbumInfo")]
        public System.Threading.Tasks.Task<GetAlbumInfoResponse> PostGetAlbumInfo([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body19 body)
        {

            return _implementation.PostGetAlbumInfoAsync(body);
        }

        /// <summary>
        /// Returns album info (v2).
        /// </summary>
        /// <remarks>
        /// Similar to getAlbumInfo, but organizes music according to ID3 tags.
        /// </remarks>
        /// <param name="id">The album ID or song ID.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getAlbumInfo2")]
        public System.Threading.Tasks.Task<GetAlbumInfoResponse> GetAlbumInfo2([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.GetAlbumInfo2Async(id);
        }

        /// <summary>
        /// Returns album info (v2).
        /// </summary>
        /// <remarks>
        /// Similar to getAlbumInfo, but organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getAlbumInfo2")]
        public System.Threading.Tasks.Task<GetAlbumInfoResponse> PostGetAlbumInfo2([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body20 body)
        {

            return _implementation.PostGetAlbumInfo2Async(body);
        }

        /// <summary>
        /// Returns a list of random, newest, highest rated etc. albums.
        /// </summary>
        /// <remarks>
        /// Returns a list of random, newest, highest rated etc. albums. Similar to the album lists on the home page of the Subsonic web interface.
        /// </remarks>
        /// <param name="size">The number of albums to return. Max 500.</param>
        /// <param name="offset">The list offset. Useful if you for example want to page through the list of newest albums.</param>
        /// <param name="fromYear">Required if `type=='byYear'`. The first year in the range. If `fromYear` &gt; `toYear` a reverse chronological list is returned.</param>
        /// <param name="toYear">Required if `type=='byYear'`. The last year in the range.</param>
        /// <param name="genre">Required if `type=='byGenre'`. The name of the genre, e.g., “Rock”.</param>
        /// <param name="musicFolderId">(Since 1.11.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getAlbumList")]
        public System.Threading.Tasks.Task<GetAlbumListResponse> GetAlbumList([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] AlbumListType type, [Microsoft.AspNetCore.Mvc.FromQuery] int? size, [Microsoft.AspNetCore.Mvc.FromQuery] int? offset, [Microsoft.AspNetCore.Mvc.FromQuery] int? fromYear, [Microsoft.AspNetCore.Mvc.FromQuery] int? toYear, [Microsoft.AspNetCore.Mvc.FromQuery] string genre, [Microsoft.AspNetCore.Mvc.FromQuery] string musicFolderId)
        {

            return _implementation.GetAlbumListAsync(type, size ?? 10, offset ?? 0, fromYear, toYear, genre, musicFolderId);
        }

        /// <summary>
        /// Returns a list of random, newest, highest rated etc. albums.
        /// </summary>
        /// <remarks>
        /// Returns a list of random, newest, highest rated etc. albums. Similar to the album lists on the home page of the Subsonic web interface.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getAlbumList")]
        public System.Threading.Tasks.Task<GetAlbumListResponse> PostGetAlbumList([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body21 body)
        {

            return _implementation.PostGetAlbumListAsync(body);
        }

        /// <summary>
        /// Returns a list of random, newest, highest rated etc. albums (v2).
        /// </summary>
        /// <remarks>
        /// Similar to `getAlbumList`, but organizes music according to ID3 tags.
        /// </remarks>
        /// <param name="size">The number of albums to return. Max 500.</param>
        /// <param name="offset">The list offset. Useful if you for example want to page through the list of newest albums.</param>
        /// <param name="fromYear">Required if `type=='byYear'`. The first year in the range. If `fromYear` &gt; `toYear` a reverse chronological list is returned.</param>
        /// <param name="toYear">Required if `type=='byYear'`. The last year in the range.</param>
        /// <param name="genre">Required if `type=='byGenre'`. The name of the genre, e.g., “Rock”.</param>
        /// <param name="musicFolderId">(Since 1.11.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getAlbumList2")]
        public System.Threading.Tasks.Task<GetAlbumList2Response> GetAlbumList2([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] AlbumListType type, [Microsoft.AspNetCore.Mvc.FromQuery] int? size, [Microsoft.AspNetCore.Mvc.FromQuery] int? offset, [Microsoft.AspNetCore.Mvc.FromQuery] int? fromYear, [Microsoft.AspNetCore.Mvc.FromQuery] int? toYear, [Microsoft.AspNetCore.Mvc.FromQuery] string genre, [Microsoft.AspNetCore.Mvc.FromQuery] string musicFolderId)
        {

            return _implementation.GetAlbumList2Async(type, size ?? 10, offset ?? 0, fromYear, toYear, genre, musicFolderId);
        }

        /// <summary>
        /// Returns a list of random, newest, highest rated etc. albums (v2).
        /// </summary>
        /// <remarks>
        /// Similar to `getAlbumList`, but organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getAlbumList2")]
        public System.Threading.Tasks.Task<GetAlbumList2Response> PostGetAlbumList2([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body22 body)
        {

            return _implementation.PostGetAlbumList2Async(body);
        }

        /// <summary>
        /// Returns details for an artist.
        /// </summary>
        /// <remarks>
        /// Returns details for an artist, including a list of albums. This method organizes music according to ID3 tags.
        /// </remarks>
        /// <param name="id">The artist ID.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getArtist")]
        public System.Threading.Tasks.Task<GetArtistResponse> GetArtist([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.GetArtistAsync(id);
        }

        /// <summary>
        /// Returns details for an artist.
        /// </summary>
        /// <remarks>
        /// Returns details for an artist, including a list of albums. This method organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getArtist")]
        public System.Threading.Tasks.Task<GetArtistResponse> PostGetArtist([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body23 body)
        {

            return _implementation.PostGetArtistAsync(body);
        }

        /// <summary>
        /// Returns artist info.
        /// </summary>
        /// <remarks>
        /// Returns artist info with biography, image URLs and similar artists, using data from last.fm.
        /// </remarks>
        /// <param name="id">The artist, album or song ID.</param>
        /// <param name="count">Max number of similar artists to return.</param>
        /// <param name="includeNotPresent">Whether to return artists that are not present in the media library.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getArtistInfo")]
        public System.Threading.Tasks.Task<GetArtistInfoResponse> GetArtistInfo([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id, [Microsoft.AspNetCore.Mvc.FromQuery] int? count, [Microsoft.AspNetCore.Mvc.FromQuery] bool? includeNotPresent)
        {

            return _implementation.GetArtistInfoAsync(id, count ?? 20, includeNotPresent ?? false);
        }

        /// <summary>
        /// Returns artist info.
        /// </summary>
        /// <remarks>
        /// Returns artist info with biography, image URLs and similar artists, using data from last.fm.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getArtistInfo")]
        public System.Threading.Tasks.Task<GetArtistInfoResponse> PostGetArtistInfo([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body24 body)
        {

            return _implementation.PostGetArtistInfoAsync(body);
        }

        /// <summary>
        /// Returns artist info (v2).
        /// </summary>
        /// <remarks>
        /// Similar to `getArtistInfo`, but organizes music according to ID3 tags.
        /// </remarks>
        /// <param name="id">The artist, album or song ID.</param>
        /// <param name="count">Max number of similar artists to return.</param>
        /// <param name="includeNotPresent">Whether to return artists that are not present in the media library.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getArtistInfo2")]
        public System.Threading.Tasks.Task<GetArtistInfo2Response> GetArtistInfo2([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id, [Microsoft.AspNetCore.Mvc.FromQuery] int? count, [Microsoft.AspNetCore.Mvc.FromQuery] bool? includeNotPresent)
        {

            return _implementation.GetArtistInfo2Async(id, count ?? 20, includeNotPresent ?? false);
        }

        /// <summary>
        /// Returns artist info (v2).
        /// </summary>
        /// <remarks>
        /// Similar to `getArtistInfo`, but organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getArtistInfo2")]
        public System.Threading.Tasks.Task<GetArtistInfo2Response> PostGetArtistInfo2([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body25 body)
        {

            return _implementation.PostGetArtistInfo2Async(body);
        }

        /// <summary>
        /// Returns all artists.
        /// </summary>
        /// <remarks>
        /// Similar to `getIndexes`, but organizes music according to ID3 tags.
        /// </remarks>
        /// <param name="musicFolderId">If specified, only return artists in the music folder with the given ID. See `getMusicFolders`.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getArtists")]
        public System.Threading.Tasks.Task<GetArtistsResponse> GetArtists([Microsoft.AspNetCore.Mvc.FromQuery] string musicFolderId)
        {

            return _implementation.GetArtistsAsync(musicFolderId);
        }

        /// <summary>
        /// Returns all artists.
        /// </summary>
        /// <remarks>
        /// Similar to `getIndexes`, but organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getArtists")]
        public System.Threading.Tasks.Task<GetArtistsResponse> PostGetArtists([Microsoft.AspNetCore.Mvc.FromBody] Body26 body)
        {

            return _implementation.PostGetArtistsAsync(body);
        }

        /// <summary>
        /// Returns the avatar (personal image) for a user.
        /// </summary>
        /// <remarks>
        /// Returns the avatar (personal image) for a user.
        /// </remarks>
        /// <returns>Success (binary) or error (xml) response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getAvatar")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> GetAvatar([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string username)
        {

            return _implementation.GetAvatarAsync(username);
        }

        /// <summary>
        /// Returns the avatar (personal image) for a user.
        /// </summary>
        /// <remarks>
        /// Returns the avatar (personal image) for a user.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Success (binary) or error (xml) response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getAvatar")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> PostGetAvatar([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body27 body)
        {

            return _implementation.PostGetAvatarAsync(body);
        }

        /// <summary>
        /// Returns all bookmarks for this user.
        /// </summary>
        /// <remarks>
        /// Returns all bookmarks for this user. A bookmark is a position within a certain media file.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getBookmarks")]
        public System.Threading.Tasks.Task<GetBookmarksResponse> GetBookmarks()
        {

            return _implementation.GetBookmarksAsync();
        }

        /// <summary>
        /// Returns all bookmarks for this user.
        /// </summary>
        /// <remarks>
        /// Returns all bookmarks for this user. A bookmark is a position within a certain media file.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getBookmarks")]
        public System.Threading.Tasks.Task<GetBookmarksResponse> PostGetBookmarks([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetBookmarksAsync(body);
        }

        /// <summary>
        /// Returns captions (subtitles) for a video.
        /// </summary>
        /// <remarks>
        /// Returns captions (subtitles) for a video. Use `getVideoInfo` to get a list of available captions.
        /// </remarks>
        /// <param name="id">The ID of the video.</param>
        /// <param name="format">Preferred captions format (“srt” or “vtt”).</param>
        /// <returns>Returns the raw video captions.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getCaptions")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> GetCaptions([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id, [Microsoft.AspNetCore.Mvc.FromQuery] Format? format)
        {

            return _implementation.GetCaptionsAsync(id, format);
        }

        /// <summary>
        /// Returns captions (subtitles) for a video.
        /// </summary>
        /// <remarks>
        /// Returns captions (subtitles) for a video. Use `getVideoInfo` to get a list of available captions.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Returns the raw video captions.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getCaptions")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> PostGetCaptions([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body28 body)
        {

            return _implementation.PostGetCaptionsAsync(body);
        }

        /// <summary>
        /// Returns the current visible (non-expired) chat messages.
        /// </summary>
        /// <remarks>
        /// Returns the current visible (non-expired) chat messages.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getChatMessages")]
        public System.Threading.Tasks.Task<GetChatMessagesResponse> GetChatMessages()
        {

            return _implementation.GetChatMessagesAsync();
        }

        /// <summary>
        /// Returns the current visible (non-expired) chat messages.
        /// </summary>
        /// <remarks>
        /// Returns the current visible (non-expired) chat messages.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getChatMessages")]
        public System.Threading.Tasks.Task<GetChatMessagesResponse> PostGetChatMessages([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetChatMessagesAsync(body);
        }

        /// <summary>
        /// Returns a cover art image.
        /// </summary>
        /// <remarks>
        /// Returns a cover art image.
        /// </remarks>
        /// <param name="id">The coverArt ID. Returned by most entities likes `Child` or `AlbumID3`</param>
        /// <param name="size">If specified, scale image to this size.</param>
        /// <returns>Success (binary) or error (xml) response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getCoverArt")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> GetCoverArt([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id, [Microsoft.AspNetCore.Mvc.FromQuery] int? size)
        {

            return _implementation.GetCoverArtAsync(id, size);
        }

        /// <summary>
        /// Returns a cover art image.
        /// </summary>
        /// <remarks>
        /// Returns a cover art image.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Success (binary) or error (xml) response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getCoverArt")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> PostGetCoverArt([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body29 body)
        {

            return _implementation.PostGetCoverArtAsync(body);
        }

        /// <summary>
        /// Returns all genres.
        /// </summary>
        /// <remarks>
        /// Returns all genres.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getGenres")]
        public System.Threading.Tasks.Task<GetGenresResponse> GetGenres()
        {

            return _implementation.GetGenresAsync();
        }

        /// <summary>
        /// Returns all genres.
        /// </summary>
        /// <remarks>
        /// Returns all genres.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getGenres")]
        public System.Threading.Tasks.Task<GetGenresResponse> PostGetGenres([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetGenresAsync(body);
        }

        /// <summary>
        /// Returns an indexed structure of all artists.
        /// </summary>
        /// <remarks>
        /// Returns an indexed structure of all artists.
        /// </remarks>
        /// <param name="musicFolderId">If specified, only return artists in the music folder with the given ID. See `getMusicFolders`.</param>
        /// <param name="ifModifiedSince">If specified, only return a result if the artist collection has changed since the given time (in milliseconds since 1 Jan 1970).</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getIndexes")]
        public System.Threading.Tasks.Task<GetIndexesResponse> GetIndexes([Microsoft.AspNetCore.Mvc.FromQuery] string musicFolderId, [Microsoft.AspNetCore.Mvc.FromQuery] int? ifModifiedSince)
        {

            return _implementation.GetIndexesAsync(musicFolderId, ifModifiedSince);
        }

        /// <summary>
        /// Returns an indexed structure of all artists.
        /// </summary>
        /// <remarks>
        /// Returns an indexed structure of all artists.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getIndexes")]
        public System.Threading.Tasks.Task<GetIndexesResponse> PostGetIndexes([Microsoft.AspNetCore.Mvc.FromBody] Body30 body)
        {

            return _implementation.PostGetIndexesAsync(body);
        }

        /// <summary>
        /// Returns all internet radio stations.
        /// </summary>
        /// <remarks>
        /// Returns all internet radio stations. Takes no extra parameters.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getInternetRadioStations")]
        public System.Threading.Tasks.Task<GetInternetRadioStationsResponse> GetInternetRadioStations()
        {

            return _implementation.GetInternetRadioStationsAsync();
        }

        /// <summary>
        /// Returns all internet radio stations.
        /// </summary>
        /// <remarks>
        /// Returns all internet radio stations. Takes no extra parameters.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getInternetRadioStations")]
        public System.Threading.Tasks.Task<GetInternetRadioStationsResponse> PostGetInternetRadioStations([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetInternetRadioStationsAsync(body);
        }

        /// <summary>
        /// Get details about the software license.
        /// </summary>
        /// <remarks>
        /// Get details about the software license.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getLicense")]
        public System.Threading.Tasks.Task<GetLicenseResponse> GetLicense()
        {

            return _implementation.GetLicenseAsync();
        }

        /// <summary>
        /// Get details about the software license.
        /// </summary>
        /// <remarks>
        /// Get details about the software license.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getLicense")]
        public System.Threading.Tasks.Task<GetLicenseResponse> PostGetLicense([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetLicenseAsync(body);
        }

        /// <summary>
        /// Searches for and returns lyrics for a given song.
        /// </summary>
        /// <remarks>
        /// Searches for and returns lyrics for a given song.
        /// </remarks>
        /// <param name="artist">The artist name.</param>
        /// <param name="title">The song title.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getLyrics")]
        public System.Threading.Tasks.Task<GetLyricsResponse> GetLyrics([Microsoft.AspNetCore.Mvc.FromQuery] string artist, [Microsoft.AspNetCore.Mvc.FromQuery] string title)
        {

            return _implementation.GetLyricsAsync(artist, title);
        }

        /// <summary>
        /// Searches for and returns lyrics for a given song.
        /// </summary>
        /// <remarks>
        /// Searches for and returns lyrics for a given song.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getLyrics")]
        public System.Threading.Tasks.Task<GetLyricsResponse> PostGetLyrics([Microsoft.AspNetCore.Mvc.FromBody] Body31 body)
        {

            return _implementation.PostGetLyricsAsync(body);
        }

        /// <summary>
        /// Add support for synchronized lyrics, multiple languages, and retrieval by song ID.
        /// </summary>
        /// <remarks>
        /// OpenSubsonic extension name `songLyrics` (As returned by `getOpenSubsonicExtensions`). Retrieves all structured lyrics from the server for a given song. The lyrics can come from embedded tags (SYLT/USLT), LRC file/text file, or any other external source.
        /// </remarks>
        /// <param name="id">The track ID.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getLyricsBySongId")]
        public System.Threading.Tasks.Task<GetLyricsBySongIdResponse> GetLyricsBySongId([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.GetLyricsBySongIdAsync(id);
        }

        /// <summary>
        /// Add support for synchronized lyrics, multiple languages, and retrieval by song ID.
        /// </summary>
        /// <remarks>
        /// OpenSubsonic extension name `songLyrics` (As returned by `getOpenSubsonicExtensions`). Retrieves all structured lyrics from the server for a given song. The lyrics can come from embedded tags (SYLT/USLT), LRC file/text file, or any other external source.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getLyricsBySongId")]
        public System.Threading.Tasks.Task<GetLyricsBySongIdResponse> PostGetLyricsBySongId([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body32 body)
        {

            return _implementation.PostGetLyricsBySongIdAsync(body);
        }

        /// <summary>
        /// Returns a listing of all files in a music directory.
        /// </summary>
        /// <remarks>
        /// Returns a listing of all files in a music directory. Typically used to get list of albums for an artist, or list of songs for an album.
        /// </remarks>
        /// <param name="id">A string which uniquely identifies the music folder. Obtained by calls to `getIndexes` or `getMusicDirectory`.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getMusicDirectory")]
        public System.Threading.Tasks.Task<GetMusicDirectoryResponse> GetMusicDirectory([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.GetMusicDirectoryAsync(id);
        }

        /// <summary>
        /// Returns a listing of all files in a music directory.
        /// </summary>
        /// <remarks>
        /// Returns a listing of all files in a music directory. Typically used to get list of albums for an artist, or list of songs for an album.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getMusicDirectory")]
        public System.Threading.Tasks.Task<GetMusicDirectoryResponse> PostGetMusicDirectory([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body33 body)
        {

            return _implementation.PostGetMusicDirectoryAsync(body);
        }

        /// <summary>
        /// Returns all configured top-level music folders.
        /// </summary>
        /// <remarks>
        /// Returns all configured top-level music folders. Takes no extra parameters.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getMusicFolders")]
        public System.Threading.Tasks.Task<GetMusicFoldersResponse> GetMusicFolders()
        {

            return _implementation.GetMusicFoldersAsync();
        }

        /// <summary>
        /// Returns all configured top-level music folders.
        /// </summary>
        /// <remarks>
        /// Returns all configured top-level music folders. Takes no extra parameters.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getMusicFolders")]
        public System.Threading.Tasks.Task<GetMusicFoldersResponse> PostGetMusicFolders([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetMusicFoldersAsync(body);
        }

        /// <summary>
        /// Returns the most recently published Podcast episodes.
        /// </summary>
        /// <remarks>
        /// Returns the most recently published Podcast episodes.
        /// </remarks>
        /// <param name="count">The maximum number of episodes to return.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getNewestPodcasts")]
        public System.Threading.Tasks.Task<GetNewestPodcastsResponse> GetNewestPodcasts([Microsoft.AspNetCore.Mvc.FromQuery] int? count)
        {

            return _implementation.GetNewestPodcastsAsync(count ?? 20);
        }

        /// <summary>
        /// Returns the most recently published Podcast episodes.
        /// </summary>
        /// <remarks>
        /// Returns the most recently published Podcast episodes.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getNewestPodcasts")]
        public System.Threading.Tasks.Task<GetNewestPodcastsResponse> PostGetNewestPodcasts([Microsoft.AspNetCore.Mvc.FromBody] Body34 body)
        {

            return _implementation.PostGetNewestPodcastsAsync(body);
        }

        /// <summary>
        /// Returns what is currently being played by all users.
        /// </summary>
        /// <remarks>
        /// Returns what is currently being played by all users. Takes no extra parameters.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getNowPlaying")]
        public System.Threading.Tasks.Task<GetNowPlayingResponse> GetNowPlaying()
        {

            return _implementation.GetNowPlayingAsync();
        }

        /// <summary>
        /// Returns what is currently being played by all users.
        /// </summary>
        /// <remarks>
        /// Returns what is currently being played by all users. Takes no extra parameters.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getNowPlaying")]
        public System.Threading.Tasks.Task<GetNowPlayingResponse> PostGetNowPlaying([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetNowPlayingAsync(body);
        }

        /// <summary>
        /// List the OpenSubsonic extensions supported by this server.
        /// </summary>
        /// <remarks>
        /// List the OpenSubsonic extensions supported by this server.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getOpenSubsonicExtensions")]
        public System.Threading.Tasks.Task<GetOpenSubsonicExtensionsResponse> GetOpenSubsonicExtensions()
        {

            return _implementation.GetOpenSubsonicExtensionsAsync();
        }

        /// <summary>
        /// List the OpenSubsonic extensions supported by this server.
        /// </summary>
        /// <remarks>
        /// List the OpenSubsonic extensions supported by this server.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getOpenSubsonicExtensions")]
        public System.Threading.Tasks.Task<GetOpenSubsonicExtensionsResponse> PostGetOpenSubsonicExtensions([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetOpenSubsonicExtensionsAsync(body);
        }

        /// <summary>
        /// Returns a listing of files in a saved playlist.
        /// </summary>
        /// <remarks>
        /// Returns a listing of files in a saved playlist.
        /// </remarks>
        /// <param name="id">ID of the playlist to return, as obtained by `getPlaylists`.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getPlaylist")]
        public System.Threading.Tasks.Task<GetPlaylistResponse> GetPlaylist([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.GetPlaylistAsync(id);
        }

        /// <summary>
        /// Returns a listing of files in a saved playlist.
        /// </summary>
        /// <remarks>
        /// Returns a listing of files in a saved playlist.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getPlaylist")]
        public System.Threading.Tasks.Task<GetPlaylistResponse> PostGetPlaylist([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body35 body)
        {

            return _implementation.PostGetPlaylistAsync(body);
        }

        /// <summary>
        /// Returns all playlists a user is allowed to play.
        /// </summary>
        /// <remarks>
        /// Returns all playlists a user is allowed to play.
        /// </remarks>
        /// <param name="username">(Since 1.8.0) If specified, return playlists for this user rather than for the authenticated user. The authenticated user must have admin role if this parameter is used.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getPlaylists")]
        public System.Threading.Tasks.Task<GetPlaylistsResponse> GetPlaylists([Microsoft.AspNetCore.Mvc.FromQuery] string username)
        {

            return _implementation.GetPlaylistsAsync(username);
        }

        /// <summary>
        /// Returns all playlists a user is allowed to play.
        /// </summary>
        /// <remarks>
        /// Returns all playlists a user is allowed to play.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getPlaylists")]
        public System.Threading.Tasks.Task<GetPlaylistsResponse> PostGetPlaylists([Microsoft.AspNetCore.Mvc.FromBody] Body36 body)
        {

            return _implementation.PostGetPlaylistsAsync(body);
        }

        /// <summary>
        /// Returns the state of the play queue for this user.
        /// </summary>
        /// <remarks>
        /// Returns the state of the play queue for this user (as set by savePlayQueue). This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book).
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getPlayQueue")]
        public System.Threading.Tasks.Task<GetPlayQueueResponse> GetPlayQueue()
        {

            return _implementation.GetPlayQueueAsync();
        }

        /// <summary>
        /// Returns the state of the play queue for this user.
        /// </summary>
        /// <remarks>
        /// Returns the state of the play queue for this user (as set by savePlayQueue). This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getPlayQueue")]
        public System.Threading.Tasks.Task<GetPlayQueueResponse> PostGetPlayQueue([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetPlayQueueAsync(body);
        }

        /// <summary>
        /// Returns the state of the play queue for this user, using queue index.
        /// </summary>
        /// <remarks>
        /// Returns the state of the play queue for this user (as set by savePlayQueue). This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book).
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getPlayQueueByIndex")]
        public System.Threading.Tasks.Task<GetPlayQueueByIndexResponse> GetPlayQueueByIndex()
        {

            return _implementation.GetPlayQueueByIndexAsync();
        }

        /// <summary>
        /// Returns the state of the play queue for this user.
        /// </summary>
        /// <remarks>
        /// Returns the state of the play queue for this user (as set by savePlayQueue). This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getPlayQueueByIndex")]
        public System.Threading.Tasks.Task<GetPlayQueueByIndexResponse> PostGetPlayQueueByIndex([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetPlayQueueByIndexAsync(body);
        }

        /// <summary>
        /// Returns details for a podcast episode.
        /// </summary>
        /// <remarks>
        /// OpenSubsonic extension name getPodcastEpisode (As returned by `getOpenSubsonicExtensions`). Returns details for a podcast episode.
        /// </remarks>
        /// <param name="id">The podcast episode ID.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getPodcastEpisode")]
        public System.Threading.Tasks.Task<GetPodcastEpisodeResponse> GetPodcastEpisode([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.GetPodcastEpisodeAsync(id);
        }

        /// <summary>
        /// Returns details for a podcast episode.
        /// </summary>
        /// <remarks>
        /// OpenSubsonic extension name `getPodcastEpisode` (As returned by `getOpenSubsonicExtensions`). Returns details for a podcast episode.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getPodcastEpisode")]
        public System.Threading.Tasks.Task<GetPodcastEpisodeResponse> PostGetPodcastEpisode([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body37 body)
        {

            return _implementation.PostGetPodcastEpisodeAsync(body);
        }

        /// <summary>
        /// Returns all Podcast channels the server subscribes to, and (optionally) their episodes.
        /// </summary>
        /// <remarks>
        /// Returns all Podcast channels the server subscribes to, and (optionally) their episodes. This method can also be used to return details for only one channel - refer to the id parameter. A typical use case for this method would be to first retrieve all channels without episodes, and then retrieve all episodes for the single channel the user selects.
        /// </remarks>
        /// <param name="id">(Since 1.9.0) If specified, only return the Podcast channel with this ID.</param>
        /// <param name="includeEpisodes">(Since 1.9.0) Whether to include Podcast episodes in the returned result.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getPodcasts")]
        public System.Threading.Tasks.Task<GetPodcastsResponse> GetPodcasts([Microsoft.AspNetCore.Mvc.FromQuery] string id, [Microsoft.AspNetCore.Mvc.FromQuery] bool? includeEpisodes)
        {

            return _implementation.GetPodcastsAsync(id, includeEpisodes ?? true);
        }

        /// <summary>
        /// Returns all Podcast channels the server subscribes to, and (optionally) their episodes.
        /// </summary>
        /// <remarks>
        /// Returns all Podcast channels the server subscribes to, and (optionally) their episodes. This method can also be used to return details for only one channel - refer to the id parameter. A typical use case for this method would be to first retrieve all channels without episodes, and then retrieve all episodes for the single channel the user selects.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getPodcasts")]
        public System.Threading.Tasks.Task<GetPodcastsResponse> PostGetPodcasts([Microsoft.AspNetCore.Mvc.FromBody] Body38 body)
        {

            return _implementation.PostGetPodcastsAsync(body);
        }

        /// <summary>
        /// Returns random songs matching the given criteria.
        /// </summary>
        /// <remarks>
        /// Returns random songs matching the given criteria.
        /// </remarks>
        /// <param name="size">The maximum number of songs to return. Max 500.</param>
        /// <param name="genre">Only returns songs belonging to this genre.</param>
        /// <param name="fromYear">(Since 1.9.0) Only return songs from this year or later.</param>
        /// <param name="toYear">Only return songs published before or in this year.</param>
        /// <param name="musicFolderId">Only return songs in the music folder with the given ID. See `getMusicFolders`.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getRandomSongs")]
        public System.Threading.Tasks.Task<GetRandomSongsResponse> GetRandomSongs([Microsoft.AspNetCore.Mvc.FromQuery] int? size, [Microsoft.AspNetCore.Mvc.FromQuery] string genre, [Microsoft.AspNetCore.Mvc.FromQuery] int? fromYear, [Microsoft.AspNetCore.Mvc.FromQuery] int? toYear, [Microsoft.AspNetCore.Mvc.FromQuery] string musicFolderId)
        {

            return _implementation.GetRandomSongsAsync(size ?? 10, genre, fromYear, toYear, musicFolderId);
        }

        /// <summary>
        /// Returns random songs matching the given criteria.
        /// </summary>
        /// <remarks>
        /// Returns random songs matching the given criteria.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getRandomSongs")]
        public System.Threading.Tasks.Task<GetRandomSongsResponse> PostGetRandomSongs([Microsoft.AspNetCore.Mvc.FromBody] Body39 body)
        {

            return _implementation.PostGetRandomSongsAsync(body);
        }

        /// <summary>
        /// Returns the current status for media library scanning.
        /// </summary>
        /// <remarks>
        /// Returns the current status for media library scanning. Takes no extra parameters.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getScanStatus")]
        public System.Threading.Tasks.Task<GetScanStatusResponse> GetScanStatus()
        {

            return _implementation.GetScanStatusAsync();
        }

        /// <summary>
        /// Returns the current status for media library scanning.
        /// </summary>
        /// <remarks>
        /// Returns the current status for media library scanning. Takes no extra parameters.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getScanStatus")]
        public System.Threading.Tasks.Task<GetScanStatusResponse> PostGetScanStatus([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetScanStatusAsync(body);
        }

        /// <summary>
        /// Returns information about shared media this user is allowed to manage.
        /// </summary>
        /// <remarks>
        /// Returns information about shared media this user is allowed to manage. Takes no extra parameters.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getShares")]
        public System.Threading.Tasks.Task<GetSharesResponse> GetShares()
        {

            return _implementation.GetSharesAsync();
        }

        /// <summary>
        /// Returns information about shared media this user is allowed to manage.
        /// </summary>
        /// <remarks>
        /// Returns information about shared media this user is allowed to manage. Takes no extra parameters.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getShares")]
        public System.Threading.Tasks.Task<GetSharesResponse> PostGetShares([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetSharesAsync(body);
        }

        /// <summary>
        /// Returns a random collection of songs from the given artist and similar artists.
        /// </summary>
        /// <remarks>
        /// Returns a random collection of songs from the given artist and similar artists, using data from last.fm. Typically used for artist radio features.
        /// </remarks>
        /// <param name="id">The artist, album or song ID.</param>
        /// <param name="count">Max number of songs to return.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getSimilarSongs")]
        public System.Threading.Tasks.Task<GetSimilarSongsResponse> GetSimilarSongs([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id, [Microsoft.AspNetCore.Mvc.FromQuery] int? count)
        {

            return _implementation.GetSimilarSongsAsync(id, count ?? 50);
        }

        /// <summary>
        /// Returns a random collection of songs from the given artist and similar artists.
        /// </summary>
        /// <remarks>
        /// Returns a random collection of songs from the given artist and similar artists, using data from last.fm. Typically used for artist radio features.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getSimilarSongs")]
        public System.Threading.Tasks.Task<GetSimilarSongsResponse> PostGetSimilarSongs([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body40 body)
        {

            return _implementation.PostGetSimilarSongsAsync(body);
        }

        /// <summary>
        /// Returns a random collection of songs from the given artist and similar artists (v2).
        /// </summary>
        /// <remarks>
        /// Similar to `getSimilarSongs`, but organizes music according to ID3 tags.
        /// </remarks>
        /// <param name="id">The artist, album or song ID.</param>
        /// <param name="count">Max number of songs to return.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getSimilarSongs2")]
        public System.Threading.Tasks.Task<GetSimilarSongs2Response> GetSimilarSongs2([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id, [Microsoft.AspNetCore.Mvc.FromQuery] int? count)
        {

            return _implementation.GetSimilarSongs2Async(id, count ?? 50);
        }

        /// <summary>
        /// Returns a random collection of songs from the given artist and similar artists (v2).
        /// </summary>
        /// <remarks>
        /// Similar to `getSimilarSongs`, but organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getSimilarSongs2")]
        public System.Threading.Tasks.Task<GetSimilarSongs2Response> PostGetSimilarSongs2([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body41 body)
        {

            return _implementation.PostGetSimilarSongs2Async(body);
        }

        /// <summary>
        /// Returns details for a song.
        /// </summary>
        /// <remarks>
        /// Returns details for a song.
        /// </remarks>
        /// <param name="id">The song ID.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getSong")]
        public System.Threading.Tasks.Task<GetSongResponse> GetSong([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.GetSongAsync(id);
        }

        /// <summary>
        /// Returns details for a song.
        /// </summary>
        /// <remarks>
        /// Returns details for a song.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getSong")]
        public System.Threading.Tasks.Task<GetSongResponse> PostGetSong([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body42 body)
        {

            return _implementation.PostGetSongAsync(body);
        }

        /// <summary>
        /// Returns songs in a given genre.
        /// </summary>
        /// <remarks>
        /// Returns songs in a given genre.
        /// </remarks>
        /// <param name="genre">The genre, as returned by `getGenres`.</param>
        /// <param name="count">The maximum number of songs to return. Max 500.</param>
        /// <param name="offset">The offset. Useful if you want to page through the songs in a genre.</param>
        /// <param name="musicFolderId">(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getSongsByGenre")]
        public System.Threading.Tasks.Task<GetSongsByGenreResponse> GetSongsByGenre([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string genre, [Microsoft.AspNetCore.Mvc.FromQuery] int? count, [Microsoft.AspNetCore.Mvc.FromQuery] int? offset, [Microsoft.AspNetCore.Mvc.FromQuery] string musicFolderId)
        {

            return _implementation.GetSongsByGenreAsync(genre, count ?? 10, offset ?? 0, musicFolderId);
        }

        /// <summary>
        /// Returns songs in a given genre.
        /// </summary>
        /// <remarks>
        /// Returns songs in a given genre.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getSongsByGenre")]
        public System.Threading.Tasks.Task<GetSongsByGenreResponse> PostGetSongsByGenre([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body43 body)
        {

            return _implementation.PostGetSongsByGenreAsync(body);
        }

        /// <summary>
        /// Returns starred songs, albums and artists.
        /// </summary>
        /// <remarks>
        /// Returns starred songs, albums and artists.
        /// </remarks>
        /// <param name="musicFolderId">(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getStarred")]
        public System.Threading.Tasks.Task<GetStarredResponse> GetStarred([Microsoft.AspNetCore.Mvc.FromQuery] string musicFolderId)
        {

            return _implementation.GetStarredAsync(musicFolderId);
        }

        /// <summary>
        /// Returns starred songs, albums and artists.
        /// </summary>
        /// <remarks>
        /// Returns starred songs, albums and artists.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getStarred")]
        public System.Threading.Tasks.Task<GetStarredResponse> PostGetStarred([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetStarredAsync(body);
        }

        /// <summary>
        /// Returns starred songs, albums and artists.
        /// </summary>
        /// <remarks>
        /// Similar to `getStarred`, but organizes music according to ID3 tags.
        /// </remarks>
        /// <param name="musicFolderId">(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getStarred2")]
        public System.Threading.Tasks.Task<GetStarred2Response> GetStarred2([Microsoft.AspNetCore.Mvc.FromQuery] string musicFolderId)
        {

            return _implementation.GetStarred2Async(musicFolderId);
        }

        /// <summary>
        /// Returns starred songs, albums and artists.
        /// </summary>
        /// <remarks>
        /// Similar to `getStarred`, but organizes music according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getStarred2")]
        public System.Threading.Tasks.Task<GetStarred2Response> PostGetStarred2([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetStarred2Async(body);
        }

        /// <summary>
        /// Returns top songs for the given artist.
        /// </summary>
        /// <remarks>
        /// Returns top songs for the given artist, using data from last.fm.
        /// </remarks>
        /// <param name="id">The artist name.</param>
        /// <param name="count">The maximum number of songs to return.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getTopSongs")]
        public System.Threading.Tasks.Task<GetTopSongsResponse> GetTopSongs([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id, [Microsoft.AspNetCore.Mvc.FromQuery] int? count)
        {

            return _implementation.GetTopSongsAsync(id, count ?? 50);
        }

        /// <summary>
        /// Returns top songs for the given artist.
        /// </summary>
        /// <remarks>
        /// Returns top songs for the given artist, using data from last.fm.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getTopSongs")]
        public System.Threading.Tasks.Task<GetTopSongsResponse> PostGetTopSongs([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body44 body)
        {

            return _implementation.PostGetTopSongsAsync(body);
        }

        /// <summary>
        /// Get details about a given user, including which authorization roles and folder access it has.
        /// </summary>
        /// <remarks>
        /// Get details about a given user, including which authorization roles and folder access it has. Can be used to enable/disable certain features in the client, such as jukebox control.
        /// </remarks>
        /// <param name="username">The name of the user to retrieve. You can only retrieve your own user unless you have admin privileges.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getUser")]
        public System.Threading.Tasks.Task<GetUserResponse> GetUser([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string username)
        {

            return _implementation.GetUserAsync(username);
        }

        /// <summary>
        /// Get details about a given user, including which authorization roles and folder access it has.
        /// </summary>
        /// <remarks>
        /// Get details about a given user, including which authorization roles and folder access it has. Can be used to enable/disable certain features in the client, such as jukebox control.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getUser")]
        public System.Threading.Tasks.Task<GetUserResponse> PostGetUser([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body45 body)
        {

            return _implementation.PostGetUserAsync(body);
        }

        /// <summary>
        /// Get details about all users, including which authorization roles and folder access they have
        /// </summary>
        /// <remarks>
        /// Get details about all users, including which authorization roles and folder access they have. Only users with admin privileges are allowed to call this method.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getUsers")]
        public System.Threading.Tasks.Task<GetUsersResponse> GetUsers()
        {

            return _implementation.GetUsersAsync();
        }

        /// <summary>
        /// Get details about all users, including which authorization roles and folder access they have
        /// </summary>
        /// <remarks>
        /// Get details about all users, including which authorization roles and folder access they have. Only users with admin privileges are allowed to call this method.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getUsers")]
        public System.Threading.Tasks.Task<GetUsersResponse> PostGetUsers([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetUsersAsync(body);
        }

        /// <summary>
        /// Returns details for a video.
        /// </summary>
        /// <remarks>
        /// Returns details for a video, including information about available audio tracks, subtitles (captions) and conversions.
        /// </remarks>
        /// <param name="id">The video ID.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getVideoInfo")]
        public System.Threading.Tasks.Task<GetVideoInfoResponse> GetVideoInfo([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id)
        {

            return _implementation.GetVideoInfoAsync(id);
        }

        /// <summary>
        /// Returns details for a video.
        /// </summary>
        /// <remarks>
        /// Returns details for a video, including information about available audio tracks, subtitles (captions) and conversions.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getVideoInfo")]
        public System.Threading.Tasks.Task<GetVideoInfoResponse> PostGetVideoInfo([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body46 body)
        {

            return _implementation.PostGetVideoInfoAsync(body);
        }

        /// <summary>
        /// Returns all video files.
        /// </summary>
        /// <remarks>
        /// Returns all video files.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/getVideos")]
        public System.Threading.Tasks.Task<GetVideosResponse> GetVideos()
        {

            return _implementation.GetVideosAsync();
        }

        /// <summary>
        /// Returns all video files.
        /// </summary>
        /// <remarks>
        /// Returns all video files.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/getVideos")]
        public System.Threading.Tasks.Task<GetVideosResponse> PostGetVideos([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostGetVideosAsync(body);
        }

        /// <summary>
        /// Downloads a given media file (HLS).
        /// </summary>
        /// <remarks>
        /// Creates an HLS (HTTP Live Streaming) playlist used for streaming video or audio. HLS is a streaming protocol implemented by Apple and works by breaking the overall stream into a sequence of small HTTP-based file downloads. It’s supported by iOS and newer versions of Android. This method also supports adaptive bitrate streaming, see the bitRate parameter.
        /// </remarks>
        /// <param name="id">A string which uniquely identifies the media file to stream.</param>
        /// <param name="bitRate">If specified, the server will attempt to limit the bitrate to this value, in kilobits per second. If this parameter is specified more than once, the server will create a variant playlist, suitable for adaptive bitrate streaming. The playlist will support streaming at all the specified bitrates. The server will automatically choose video dimensions that are suitable for the given bitrates. Since 1.9.0 you may explicitly request a certain width (480) and height (360) like so: bitRate=1000@480x360</param>
        /// <param name="audioTrack">The ID of the audio track to use. See `getVideoInfo` for how to get the list of available audio tracks for a video.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/hls.m3u8")]
        public System.Threading.Tasks.Task<string> Hls_m3u8([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id, [Microsoft.AspNetCore.Mvc.FromQuery] int? bitRate, [Microsoft.AspNetCore.Mvc.FromQuery] string audioTrack)
        {

            return _implementation.Hls_m3u8Async(id, bitRate, audioTrack);
        }

        /// <summary>
        /// Downloads a given media file (HLS).
        /// </summary>
        /// <remarks>
        /// Creates an HLS (HTTP Live Streaming) playlist used for streaming video or audio. HLS is a streaming protocol implemented by Apple and works by breaking the overall stream into a sequence of small HTTP-based file downloads. It’s supported by iOS and newer versions of Android. This method also supports adaptive bitrate streaming, see the bitRate parameter.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/hls.m3u8")]
        public System.Threading.Tasks.Task<string> PostHls_m3u8([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body47 body)
        {

            return _implementation.PostHls_m3u8Async(body);
        }

        /// <summary>
        /// Controls the jukebox, i.e., playback directly on the server’s audio hardware.
        /// </summary>
        /// <remarks>
        /// Controls the jukebox, i.e., playback directly on the server’s audio hardware. Note: The user must be authorized to control the jukebox (see Settings &gt; Users &gt; User is allowed to play files in jukebox mode).
        /// </remarks>
        /// <param name="action">The operation to perform. Must be one of: get, status (since 1.7.0), set (since 1.7.0), start, stop, skip, add, clear, remove, shuffle, setGain</param>
        /// <param name="index">Used by `skip` and `remove`. Zero-based index of the song to skip to or remove.</param>
        /// <param name="offset">(Since 1.7.0) Used by `skip`. Start playing this many seconds into the track.</param>
        /// <param name="id">Used by `add` and `set`. ID of song to add to the jukebox playlist. Use multiple id parameters to add many songs in the same request. (set is similar to a clear followed by a add, but will not change the currently playing track.)</param>
        /// <param name="gain">Used by `setGain` to control the playback volume. A float value between 0.0 and 1.0.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/jukeboxControl")]
        public System.Threading.Tasks.Task<JukeboxControlResponse> JukeboxControl([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] JukeboxAction action, [Microsoft.AspNetCore.Mvc.FromQuery] int? index, [Microsoft.AspNetCore.Mvc.FromQuery] int? offset, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> id, [Microsoft.AspNetCore.Mvc.FromQuery] float? gain)
        {

            return _implementation.JukeboxControlAsync(action, index, offset, id, gain);
        }

        /// <summary>
        /// Controls the jukebox, i.e., playback directly on the server’s audio hardware.
        /// </summary>
        /// <remarks>
        /// Controls the jukebox, i.e., playback directly on the server’s audio hardware. Note: The user must be authorized to control the jukebox (see Settings &gt; Users &gt; User is allowed to play files in jukebox mode).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/jukeboxControl")]
        public System.Threading.Tasks.Task<JukeboxControlResponse> PostJukeboxControl([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body48 body)
        {

            return _implementation.PostJukeboxControlAsync(body);
        }

        /// <summary>
        /// Used to test connectivity with the server.
        /// </summary>
        /// <remarks>
        /// Test connectivity with the server.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/ping")]
        public System.Threading.Tasks.Task<SubsonicResponse> Ping()
        {

            return _implementation.PingAsync();
        }

        /// <summary>
        /// Used to test connectivity with the server.
        /// </summary>
        /// <remarks>
        /// Test connectivity with the server.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/ping")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostPing([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostPingAsync(body);
        }

        /// <summary>
        /// Requests the server to check for new Podcast episodes.
        /// </summary>
        /// <remarks>
        /// Requests the server to check for new Podcast episodes. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/refreshPodcasts")]
        public System.Threading.Tasks.Task<SubsonicResponse> RefreshPodcasts()
        {

            return _implementation.RefreshPodcastsAsync();
        }

        /// <summary>
        /// Requests the server to check for new Podcast episodes.
        /// </summary>
        /// <remarks>
        /// Requests the server to check for new Podcast episodes. Note: The user must be authorized for Podcast administration (see Settings &gt; Users &gt; User is allowed to administrate Podcasts).
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/refreshPodcasts")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostRefreshPodcasts([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostRefreshPodcastsAsync(body);
        }

        /// <summary>
        /// Saves the state of the play queue for this user.
        /// </summary>
        /// <remarks>
        /// Saves the state of the play queue for this user. This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book). `id` is optional. Send a call without any parameters to clear the currently saved queue.
        /// </remarks>
        /// <param name="id">ID of a song in the play queue. Use one id parameter for each song in the play queue.</param>
        /// <param name="current">The ID of the current playing song.</param>
        /// <param name="position">The position in milliseconds within the currently playing song.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/savePlayQueue")]
        public System.Threading.Tasks.Task<SubsonicResponse> SavePlayQueue([Microsoft.AspNetCore.Mvc.FromQuery] string id, [Microsoft.AspNetCore.Mvc.FromQuery] string current, [Microsoft.AspNetCore.Mvc.FromQuery] int? position)
        {

            return _implementation.SavePlayQueueAsync(id, current, position);
        }

        /// <summary>
        /// Saves the state of the play queue for this user.
        /// </summary>
        /// <remarks>
        /// Saves the state of the play queue for this user. This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book). `id` is optional. Send a call without any parameters to clear the currently saved queue.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/savePlayQueue")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostSavePlayQueue([Microsoft.AspNetCore.Mvc.FromBody] Body49 body)
        {

            return _implementation.PostSavePlayQueueAsync(body);
        }

        /// <summary>
        /// Saves the state of the play queue for this user, using queue index.
        /// </summary>
        /// <remarks>
        /// Saves the state of the play queue for this user. This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book). `id` is optional. Send a call without any parameters to clear the currently saved queue.
        /// </remarks>
        /// <param name="id">ID of a song in the play queue. Use one id parameter for each song in the play queue.</param>
        /// <param name="currentIndex">The index of the current playing song.</param>
        /// <param name="position">The position in milliseconds within the currently playing song.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/savePlayQueueByIndex")]
        public System.Threading.Tasks.Task<SubsonicResponse> SavePlayQueueByIndex([Microsoft.AspNetCore.Mvc.FromQuery] string id, [Microsoft.AspNetCore.Mvc.FromQuery] int? currentIndex, [Microsoft.AspNetCore.Mvc.FromQuery] int? position)
        {

            return _implementation.SavePlayQueueByIndexAsync(id, currentIndex, position);
        }

        /// <summary>
        /// Saves the state of the play queue for this user.
        /// </summary>
        /// <remarks>
        /// Saves the state of the play queue for this user. This includes the tracks in the play queue, the currently playing track, and the position within this track. Typically used to allow a user to move between different clients/apps while retaining the same play queue (for instance when listening to an audio book). `id` is optional. Send a call without any parameters to clear the currently saved queue.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/savePlayQueueByIndex")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostSavePlayQueueByIndex([Microsoft.AspNetCore.Mvc.FromBody] Body50 body)
        {

            return _implementation.PostSavePlayQueueByIndexAsync(body);
        }

        /// <summary>
        /// Registers the local playback of one or more media files.
        /// </summary>
        /// <remarks>
        /// Registers the local playback of one or more media files. Typically used when playing media that is cached on the client. This operation includes the following:
        /// <br/>
        /// <br/>* “Scrobbles” the media files on last.fm if the user has configured his/her last.fm credentials on the server.
        /// <br/>* Updates the play count and last played timestamp for the media files. (Since 1.11.0)
        /// <br/>* Makes the media files appear in the “Now playing” page in the web app, and appear in the list of songs returned by getNowPlaying (Since 1.11.0)
        /// <br/>
        /// <br/>Since 1.8.0 you may specify multiple id (and optionally time) parameters to scrobble multiple files.
        /// </remarks>
        /// <param name="id">A string which uniquely identifies the file to scrobble.</param>
        /// <param name="time">(Since 1.8.0) The time (in milliseconds since 1 Jan 1970) at which the song was listened to.</param>
        /// <param name="submission">Whether this is a “submission” or a “now playing” notification.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/scrobble")]
        public System.Threading.Tasks.Task<SubsonicResponse> Scrobble([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id, [Microsoft.AspNetCore.Mvc.FromQuery] int? time, [Microsoft.AspNetCore.Mvc.FromQuery] bool? submission)
        {

            return _implementation.ScrobbleAsync(id, time, submission ?? true);
        }

        /// <summary>
        /// Registers the local playback of one or more media files.
        /// </summary>
        /// <remarks>
        /// Registers the local playback of one or more media files. Typically used when playing media that is cached on the client. This operation includes the following:
        /// <br/>
        /// <br/>* “Scrobbles” the media files on last.fm if the user has configured his/her last.fm credentials on the server.
        /// <br/>* Updates the play count and last played timestamp for the media files. (Since 1.11.0)
        /// <br/>* Makes the media files appear in the “Now playing” page in the web app, and appear in the list of songs returned by getNowPlaying (Since 1.11.0)
        /// <br/>
        /// <br/>Since 1.8.0 you may specify multiple id (and optionally time) parameters to scrobble multiple files.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/scrobble")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostScrobble([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body51 body)
        {

            return _implementation.PostScrobbleAsync(body);
        }

        /// <summary>
        /// Returns a listing of files matching the given search criteria. Supports paging through the result.
        /// </summary>
        /// <remarks>
        /// Deprecated since 1.4.0, use search2 instead.
        /// <br/>
        /// <br/>Returns a listing of files matching the given search criteria. Supports paging through the result.
        /// </remarks>
        /// <param name="artist">Artist to search for.</param>
        /// <param name="album">Album to search for.</param>
        /// <param name="title">Song title to search for.</param>
        /// <param name="any">Searches all fields.</param>
        /// <param name="count">Maximum number of results to return.</param>
        /// <param name="offset">Search result offset. Used for paging.</param>
        /// <param name="newerThan">Only return matches that are newer than this. Given as milliseconds since 1970.</param>
        /// <returns>Successful or failed response</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/search")]
        public System.Threading.Tasks.Task<SearchResponse> Search([Microsoft.AspNetCore.Mvc.FromQuery] string artist, [Microsoft.AspNetCore.Mvc.FromQuery] string album, [Microsoft.AspNetCore.Mvc.FromQuery] string title, [Microsoft.AspNetCore.Mvc.FromQuery] bool? any, [Microsoft.AspNetCore.Mvc.FromQuery] int? count, [Microsoft.AspNetCore.Mvc.FromQuery] int? offset, [Microsoft.AspNetCore.Mvc.FromQuery] int? newerThan)
        {

            return _implementation.SearchAsync(artist, album, title, any, count ?? 20, offset ?? 0, newerThan);
        }

        /// <summary>
        /// Returns a listing of files matching the given search criteria. Supports paging through the result.
        /// </summary>
        /// <remarks>
        /// Deprecated since 1.4.0, use search2 instead.
        /// <br/>
        /// <br/>Returns a listing of files matching the given search criteria. Supports paging through the result.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [System.Obsolete]
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/search")]
        public System.Threading.Tasks.Task<SearchResponse> PostSearch([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body52 body)
        {

            return _implementation.PostSearchAsync(body);
        }

        /// <summary>
        /// Returns a listing of files matching the given search criteria. Supports paging through the result. (v2)
        /// </summary>
        /// <remarks>
        /// Returns albums, artists and songs matching the given search criteria. Supports paging through the result.
        /// </remarks>
        /// <param name="query">Search query.</param>
        /// <param name="artistCount">Maximum number of artists to return.</param>
        /// <param name="artistOffset">Search result offset for artists. Used for paging.</param>
        /// <param name="albumCount">Maximum number of albums to return.</param>
        /// <param name="albumOffset">Search result offset for albums. Used for paging.</param>
        /// <param name="songCount">Maximum number of songs to return.</param>
        /// <param name="songOffset">Search result offset for songs. Used for paging.</param>
        /// <param name="musicFolderId">(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/search2")]
        public System.Threading.Tasks.Task<Search2Response> Search2([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string query, [Microsoft.AspNetCore.Mvc.FromQuery] int? artistCount, [Microsoft.AspNetCore.Mvc.FromQuery] int? artistOffset, [Microsoft.AspNetCore.Mvc.FromQuery] int? albumCount, [Microsoft.AspNetCore.Mvc.FromQuery] int? albumOffset, [Microsoft.AspNetCore.Mvc.FromQuery] int? songCount, [Microsoft.AspNetCore.Mvc.FromQuery] int? songOffset, [Microsoft.AspNetCore.Mvc.FromQuery] string musicFolderId)
        {

            return _implementation.Search2Async(query, artistCount ?? 20, artistOffset ?? 0, albumCount ?? 20, albumOffset ?? 0, songCount ?? 20, songOffset ?? 0, musicFolderId);
        }

        /// <summary>
        /// Returns a listing of files matching the given search criteria. Supports paging through the result. (v2)
        /// </summary>
        /// <remarks>
        /// Returns albums, artists and songs matching the given search criteria. Supports paging through the result.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/search2")]
        public System.Threading.Tasks.Task<Search2Response> PostSearch2([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body53 body)
        {

            return _implementation.PostSearch2Async(body);
        }

        /// <summary>
        /// Returns albums, artists and songs matching the given search criteria. Supports paging through the result. (v3)
        /// </summary>
        /// <remarks>
        /// Returns albums, artists and songs matching the given search criteria. Supports paging through the result.
        /// <br/>
        /// <br/>Music is organized according to ID3 tags.
        /// </remarks>
        /// <param name="query">Search query. Servers must support an empty query and return all the data to allow clients to properly access all the media information for offline sync.</param>
        /// <param name="artistCount">Maximum number of artists to return.</param>
        /// <param name="artistOffset">Search result offset for artists. Used for paging.</param>
        /// <param name="albumCount">Maximum number of albums to return.</param>
        /// <param name="albumOffset">Search result offset for albums. Used for paging.</param>
        /// <param name="songCount">Maximum number of songs to return.</param>
        /// <param name="songOffset">Search result offset for songs. Used for paging.</param>
        /// <param name="musicFolderId">(Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/search3")]
        public System.Threading.Tasks.Task<Search3Response> Search3([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string query, [Microsoft.AspNetCore.Mvc.FromQuery] int? artistCount, [Microsoft.AspNetCore.Mvc.FromQuery] int? artistOffset, [Microsoft.AspNetCore.Mvc.FromQuery] int? albumCount, [Microsoft.AspNetCore.Mvc.FromQuery] int? albumOffset, [Microsoft.AspNetCore.Mvc.FromQuery] int? songCount, [Microsoft.AspNetCore.Mvc.FromQuery] int? songOffset, [Microsoft.AspNetCore.Mvc.FromQuery] string musicFolderId)
        {

            return _implementation.Search3Async(query, artistCount ?? 20, artistOffset ?? 0, albumCount ?? 20, albumOffset ?? 0, songCount ?? 20, songOffset ?? 0, musicFolderId);
        }

        /// <summary>
        /// Returns albums, artists and songs matching the given search criteria. Supports paging through the result. (v3)
        /// </summary>
        /// <remarks>
        /// Returns albums, artists and songs matching the given search criteria. Supports paging through the result.
        /// <br/>
        /// <br/>Music is organized according to ID3 tags.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/search3")]
        public System.Threading.Tasks.Task<Search3Response> PostSearch3([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body54 body)
        {

            return _implementation.PostSearch3Async(body);
        }

        /// <summary>
        /// Sets the rating for a music file.
        /// </summary>
        /// <remarks>
        /// Sets the rating for a music file.
        /// </remarks>
        /// <param name="id">A string which uniquely identifies the file (song) or folder (album/artist) to rate.</param>
        /// <param name="rating">The rating between 1 and 5 (inclusive), or 0 to remove the rating.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/setRating")]
        public System.Threading.Tasks.Task<SubsonicResponse> SetRating([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id, [Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] int rating)
        {

            return _implementation.SetRatingAsync(id, rating);
        }

        /// <summary>
        /// Sets the rating for a music file.
        /// </summary>
        /// <remarks>
        /// Sets the rating for a music file.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/setRating")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostSetRating([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body55 body)
        {

            return _implementation.PostSetRatingAsync(body);
        }

        /// <summary>
        /// Attaches a star to a song, album or artist.
        /// </summary>
        /// <remarks>
        /// Attaches a star to a song, album or artist.
        /// </remarks>
        /// <param name="id">The ID of the file (song) or folder (album/artist) to star. Multiple parameters allowed.</param>
        /// <param name="albumId">The ID of an album to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.</param>
        /// <param name="artistId">The ID of an artist to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/star")]
        public System.Threading.Tasks.Task<SubsonicResponse> Star([Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> id, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> albumId, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> artistId)
        {

            return _implementation.StarAsync(id, albumId, artistId);
        }

        /// <summary>
        /// Attaches a star to a song, album or artist.
        /// </summary>
        /// <remarks>
        /// Attaches a star to a song, album or artist.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/star")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostStar([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body56 body)
        {

            return _implementation.PostStarAsync(body);
        }

        /// <summary>
        /// Initiates a rescan of the media libraries.
        /// </summary>
        /// <remarks>
        /// Initiates a rescan of the media libraries. Takes no extra parameters.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/startScan")]
        public System.Threading.Tasks.Task<StartScanResponse> StartScan()
        {

            return _implementation.StartScanAsync();
        }

        /// <summary>
        /// Initiates a rescan of the media libraries.
        /// </summary>
        /// <remarks>
        /// Initiates a rescan of the media libraries. Takes no extra parameters.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/startScan")]
        public System.Threading.Tasks.Task<StartScanResponse> PostStartScan([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostStartScanAsync(body);
        }

        /// <summary>
        /// Streams a given media file.
        /// </summary>
        /// <remarks>
        /// Streams a given media file.
        /// <br/>
        /// <br/>OpenSubsonic servers must not count access to this endpoint as a play and increase playcount. Clients can use the Scrobble endpoint to indicate that a media is played ensuring proper data in all cases.
        /// <br/>
        /// <br/>If the server support the Transcode Offet extension, then it must accept the timeOffset parameter for music too.
        /// </remarks>
        /// <param name="id">A string which uniquely identifies the file to stream. Obtained by calls to getMusicDirectory.</param>
        /// <param name="maxBitRate">(Since 1.2.0) If specified, the server will attempt to limit the bitrate to this value, in kilobits per second. If set to zero, no limit is imposed.</param>
        /// <param name="format">(Since 1.6.0) Specifies the preferred target format (e.g., “mp3” or “flv”) in case there are multiple applicable transcodings. Starting with 1.9.0 you can use the special value “raw” to disable transcoding.</param>
        /// <param name="timeOffset">By default only applicable to video streaming. If specified, start streaming at the given offset (in seconds) into the media. The `Transcode Offset` extension enables the parameter to music too.</param>
        /// <param name="size">(Since 1.6.0) Only applicable to video streaming. Requested video size specified as WxH, for instance “640x480”.</param>
        /// <param name="estimateContentLength">(Since 1.8.0). If set to “true”, the Content-Length HTTP header will be set to an estimated value for transcoded or downsampled media.</param>
        /// <param name="converted">(Since 1.14.0) Only applicable to video streaming. Servers can optimize videos for streaming by converting them to MP4. If a conversion exists for the video in question, then setting this parameter to “true” will cause the converted video to be returned instead of the original.</param>
        /// <returns>Success (binary) or error (xml) response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/stream")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> Stream([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id, [Microsoft.AspNetCore.Mvc.FromQuery] int? maxBitRate, [Microsoft.AspNetCore.Mvc.FromQuery] string format, [Microsoft.AspNetCore.Mvc.FromQuery] int? timeOffset, [Microsoft.AspNetCore.Mvc.FromQuery] string size, [Microsoft.AspNetCore.Mvc.FromQuery] bool? estimateContentLength, [Microsoft.AspNetCore.Mvc.FromQuery] bool? converted)
        {

            return _implementation.StreamAsync(id, maxBitRate, format, timeOffset, size, estimateContentLength ?? false, converted ?? false);
        }

        /// <summary>
        /// Streams a given media file.
        /// </summary>
        /// <remarks>
        /// Streams a given media file.
        /// <br/>
        /// <br/>OpenSubsonic servers must not count access to this endpoint as a play and increase playcount. Clients can use the Scrobble endpoint to indicate that a media is played ensuring proper data in all cases.
        /// <br/>
        /// <br/>If the server supports the Transcode Offset extension, then it must accept the timeOffset parameter for music too.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Success (binary) or error (xml) response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/stream")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.FileResult> PostStream([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body57 body)
        {

            return _implementation.PostStreamAsync(body);
        }

        /// <summary>
        /// Returns information about an API key
        /// </summary>
        /// <remarks>
        /// OpenSubsonic extension name `apiKeyAuthentication` (As returned by `getOpenSubsonicExtensions`). Returns data about an API key.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/tokenInfo")]
        public System.Threading.Tasks.Task<GetTokenInfoResponse> TokenInfo()
        {

            return _implementation.TokenInfoAsync();
        }

        /// <summary>
        /// Returns information about an API key
        /// </summary>
        /// <remarks>
        /// OpenSubsonic extension name `apiKeyAuthentication` (As returned by `getOpenSubsonicExtensions`). Returns data about an API key.
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/tokenInfo")]
        public System.Threading.Tasks.Task<GetTokenInfoResponse> PostTokenInfo([Microsoft.AspNetCore.Mvc.FromBody] object body)
        {

            return _implementation.PostTokenInfoAsync(body);
        }

        /// <summary>
        /// Removes a star to a song, album or artist.
        /// </summary>
        /// <remarks>
        /// Removes a star to a song, album or artist.
        /// </remarks>
        /// <param name="id">The ID of the file (song) or folder (album/artist) to star. Multiple parameters allowed.</param>
        /// <param name="albumId">The ID of an album to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.</param>
        /// <param name="artistId">The ID of an artist to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/unstar")]
        public System.Threading.Tasks.Task<SubsonicResponse> Unstar([Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> id, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> albumId, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> artistId)
        {

            return _implementation.UnstarAsync(id, albumId, artistId);
        }

        /// <summary>
        /// Removes a star to a song, album or artist.
        /// </summary>
        /// <remarks>
        /// Removes a star to a song, album or artist.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/unstar")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostUnstar([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body58 body)
        {

            return _implementation.PostUnstarAsync(body);
        }

        /// <summary>
        /// Updates an existing internet radio station.
        /// </summary>
        /// <remarks>
        /// Updates an existing internet radio station. Only users with admin privileges are allowed to call this method.
        /// </remarks>
        /// <param name="id">The ID of the station.</param>
        /// <param name="streamUrl">The stream URL for the station.</param>
        /// <param name="name">The user-defined name for the station.</param>
        /// <param name="homepageUrl">The home page URL for the station.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/updateInternetRadioStation")]
        public System.Threading.Tasks.Task<SubsonicResponse> UpdateInternetRadioStation([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id, [Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string streamUrl, [Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string name, [Microsoft.AspNetCore.Mvc.FromQuery] string homepageUrl)
        {

            return _implementation.UpdateInternetRadioStationAsync(id, streamUrl, name, homepageUrl);
        }

        /// <summary>
        /// Updates an existing internet radio station.
        /// </summary>
        /// <remarks>
        /// Updates an existing internet radio station. Only users with admin privileges are allowed to call this method.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/updateInternetRadioStation")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostUpdateInternetRadioStation([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body59 body)
        {

            return _implementation.PostUpdateInternetRadioStationAsync(body);
        }

        /// <summary>
        /// Updates a playlist. Only the owner of a playlist is allowed to update it.
        /// </summary>
        /// <remarks>
        /// Updates a playlist. Only the owner of a playlist is allowed to update it.
        /// </remarks>
        /// <param name="playlistId">The playlist ID.</param>
        /// <param name="name">The human-readable name of the playlist.</param>
        /// <param name="comment">The playlist comment.</param>
        /// <param name="@public">`true` if the playlist should be visible to all users, `false` otherwise.</param>
        /// <param name="songIdToAdd">Add this song with this ID to the playlist. Multiple parameters allowed.</param>
        /// <param name="songIndexToRemove">Remove the song at this position in the playlist. Multiple parameters allowed.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/updatePlaylist")]
        public System.Threading.Tasks.Task<SubsonicResponse> UpdatePlaylist([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string playlistId, [Microsoft.AspNetCore.Mvc.FromQuery] string name, [Microsoft.AspNetCore.Mvc.FromQuery] string comment, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "public")] bool? @public, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> songIdToAdd, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<int> songIndexToRemove)
        {

            return _implementation.UpdatePlaylistAsync(playlistId, name, comment, @public, songIdToAdd, songIndexToRemove);
        }

        /// <summary>
        /// Updates a playlist. Only the owner of a playlist is allowed to update it.
        /// </summary>
        /// <remarks>
        /// Updates a playlist. Only the owner of a playlist is allowed to update it.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/updatePlaylist")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostUpdatePlaylist([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body60 body)
        {

            return _implementation.PostUpdatePlaylistAsync(body);
        }

        /// <summary>
        /// Updates the description and/or expiration date for an existing share.
        /// </summary>
        /// <remarks>
        /// Updates the description and/or expiration date for an existing share.
        /// </remarks>
        /// <param name="id">ID of the share to update.</param>
        /// <param name="description">A user-defined description that will be displayed to people visiting the shared media.</param>
        /// <param name="expires">The time at which the share expires. Given as milliseconds since 1970, or zero to remove the expiration.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/updateShare")]
        public System.Threading.Tasks.Task<SubsonicResponse> UpdateShare([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string id, [Microsoft.AspNetCore.Mvc.FromQuery] string description, [Microsoft.AspNetCore.Mvc.FromQuery] int? expires)
        {

            return _implementation.UpdateShareAsync(id, description, expires);
        }

        /// <summary>
        /// Updates the description and/or expiration date for an existing share.
        /// </summary>
        /// <remarks>
        /// Updates the description and/or expiration date for an existing share.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/updateShare")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostUpdateShare([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body61 body)
        {

            return _implementation.PostUpdateShareAsync(body);
        }

        /// <summary>
        /// Modifies an existing user on the server.
        /// </summary>
        /// <remarks>
        /// Modifies an existing user on the server.
        /// </remarks>
        /// <param name="username">The name of the user.</param>
        /// <param name="password">The password of the user, either in clear text of hex-encoded (see above).</param>
        /// <param name="email">The email address of the user.</param>
        /// <param name="ldapAuthenticated">Whether the user is authenicated in LDAP.</param>
        /// <param name="adminRole">Whether the user is administrator.</param>
        /// <param name="settingsRole">Whether the user is allowed to change personal settings and password.</param>
        /// <param name="streamRole">Whether the user is allowed to play files.</param>
        /// <param name="jukeboxRole">Whether the user is allowed to play files in jukebox mode.</param>
        /// <param name="downloadRole">Whether the user is allowed to download files.</param>
        /// <param name="uploadRole">Whether the user is allowed to upload files.</param>
        /// <param name="coverArtRole">Whether the user is allowed to change cover art and tags.</param>
        /// <param name="commentRole">Whether the user is allowed to create and edit comments and ratings.</param>
        /// <param name="podcastRole">Whether the user is allowed to administrate Podcasts.</param>
        /// <param name="shareRole">Whether the user is allowed to share files with anyone.</param>
        /// <param name="videoConversionRole">(Since 1.15.0) Whether the user is allowed to start video conversions.</param>
        /// <param name="musicFolderId">(Since 1.12.0) IDs of the music folders the user is allowed access to. Include the parameter once for each folder.</param>
        /// <param name="maxBitRate">(Since 1.13.0) The maximum bit rate (in Kbps) for the user. Audio streams of higher bit rates are automatically downsampled to this bit rate. Legal values: 0 (no limit), 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320.</param>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("rest/updateUser")]
        public System.Threading.Tasks.Task<SubsonicResponse> UpdateUser([Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string username, [Microsoft.AspNetCore.Mvc.FromQuery] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string password, [Microsoft.AspNetCore.Mvc.FromQuery] string email, [Microsoft.AspNetCore.Mvc.FromQuery] bool? ldapAuthenticated, [Microsoft.AspNetCore.Mvc.FromQuery] bool? adminRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? settingsRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? streamRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? jukeboxRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? downloadRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? uploadRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? coverArtRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? commentRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? podcastRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? shareRole, [Microsoft.AspNetCore.Mvc.FromQuery] bool? videoConversionRole, [Microsoft.AspNetCore.Mvc.FromQuery] System.Collections.Generic.IEnumerable<string> musicFolderId, [Microsoft.AspNetCore.Mvc.FromQuery] MaxBitRate? maxBitRate)
        {

            return _implementation.UpdateUserAsync(username, password, email, ldapAuthenticated ?? false, adminRole ?? false, settingsRole ?? true, streamRole ?? true, jukeboxRole ?? false, downloadRole ?? false, uploadRole ?? false, coverArtRole ?? false, commentRole ?? false, podcastRole ?? false, shareRole ?? false, videoConversionRole ?? false, musicFolderId, maxBitRate);
        }

        /// <summary>
        /// Modifies an existing user on the server.
        /// </summary>
        /// <remarks>
        /// Modifies an existing user on the server.
        /// <br/>
        /// <br/>Requires OpenSubsonic extension name `formPost` (As returned by `getOpenSubsonicExtensions`)
        /// </remarks>
        /// <returns>Successful or failed response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("rest/updateUser")]
        public System.Threading.Tasks.Task<SubsonicResponse> PostUpdateUser([Microsoft.AspNetCore.Mvc.FromBody] [Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Body62 body)
        {

            return _implementation.PostUpdateUserAsync(body);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubsonicError
    {

        /// <summary>
        /// The error code.
        /// <br/>* 0: A generic error.
        /// <br/>* 10: Required parameter is missing.
        /// <br/>* 20: Incompatible Subsonic REST protocol version. Client must upgrade.
        /// <br/>* 30: Incompatible Subsonic REST protocol version. Server must upgrade.
        /// <br/>* 40: Wrong username or password.
        /// <br/>* 41: Token authentication not supported for LDAP users.
        /// <br/>* 42: Provided authentication mechanism not supported.
        /// <br/>* 43: Multiple conflicting authentication mechanisms provided.
        /// <br/>* 44: Invalid API key.
        /// <br/>* 50: User is not authorized for the given operation.
        /// <br/>* 60: The trial period for the Subsonic server is over. Please upgrade to Subsonic Premium. Visit subsonic.org for details.
        /// <br/>* 70: The requested data was not found.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubsonicErrorCode Code { get; set; }

        /// <summary>
        /// The optional error message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// A URL (documentation, configuration, etc) which may provide additional context for the error)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("helpUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HelpUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SubsonicError FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubsonicError>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubsonicBaseResponse
    {

        /// <summary>
        /// The server supported Subsonic API version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Version { get; set; }

        /// <summary>
        /// The server actual name. [Ex: Navidrome or gonic]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// The server version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serverVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ServerVersion { get; set; }

        /// <summary>
        /// Must return true if the server support OpenSubsonic API v1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("openSubsonic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OpenSubsonic { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SubsonicBaseResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubsonicBaseResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubsonicSuccessResponse : SubsonicBaseResponse
    {

        /// <summary>
        /// The command result. `ok`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubsonicSuccessResponseStatus Status { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SubsonicSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubsonicSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubsonicFailureResponse : SubsonicBaseResponse
    {

        /// <summary>
        /// The command result. `failed`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SubsonicFailureResponseStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public SubsonicError Error { get; set; } = new SubsonicError();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SubsonicFailureResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubsonicFailureResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Common answer wrapper.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubsonicResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubsonicSuccessResponse SubsonicResponse1 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SubsonicResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubsonicResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A genre returned in list of genres for an item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemGenre
    {

        /// <summary>
        /// Genre name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemGenre FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemGenre>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// An artist from ID3 tags.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArtistID3
    {

        /// <summary>
        /// The id of the artist
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The artist name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// A covertArt id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coverArt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoverArt { get; set; }

        /// <summary>
        /// An url to an external image source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artistImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArtistImageUrl { get; set; }

        /// <summary>
        /// Artist album count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("albumCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AlbumCount { get; set; }

        /// <summary>
        /// Date the artist was starred. [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("starred", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Starred { get; set; }

        /// <summary>
        /// The artist MusicBrainzID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicBrainzId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MusicBrainzId { get; set; }

        /// <summary>
        /// The artist sort name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SortName { get; set; }

        /// <summary>
        /// The list of all roles this artist has in the library.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Roles { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ArtistID3 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArtistID3>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A contributor artist for a song or an album
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contributor
    {

        /// <summary>
        /// The contributor role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Role { get; set; }

        /// <summary>
        /// The subRole for roles that may require it. Ex: The instrument for the performer role (TMCL/performer tags). Note: For consistency between different tag formats, the TIPL sub roles should be directly exposed in the role field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubRole { get; set; }

        [Newtonsoft.Json.JsonProperty("artist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public ArtistID3 Artist { get; set; } = new ArtistID3();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Contributor FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Contributor>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// The replay gain data of a song. Note: If the data is not present the field must be ommited in the answer. (But the replayGain field on Child must always be present)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReplayGain
    {

        /// <summary>
        /// The track replay gain value. (In Db)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackGain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TrackGain { get; set; }

        /// <summary>
        /// The album replay gain value. (In Db)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("albumGain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double AlbumGain { get; set; }

        /// <summary>
        /// The track peak value. (Must be positive)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trackPeak", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double TrackPeak { get; set; }

        /// <summary>
        /// The album peak value. (Must be positive)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("albumPeak", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, double.MaxValue)]
        public double AlbumPeak { get; set; }

        /// <summary>
        /// The base gain value. (In Db) (Ogg Opus Output Gain for example)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseGain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double BaseGain { get; set; }

        /// <summary>
        /// An optional fallback gain that clients should apply when the corresponding gain value is missing. (Can be computed from the tracks or exposed as an user setting.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fallbackGain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double FallbackGain { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReplayGain FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReplayGain>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// The generic type of media [music/podcast/audiobook/video]
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GenericMediaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"music")]
        Music = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"video")]
        Video = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"podcast")]
        Podcast = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"audiobook")]
        Audiobook = 3,

    }

    /// <summary>
    /// Note: If you support `musicBrainzId` you must support this field to ensure clients knows what the ID refers to.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MediaType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"song")]
        Song = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"album")]
        Album = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"artist")]
        Artist = 2,

    }

    /// <summary>
    /// Returns “explicit”, “clean” or “”. (For songs extracted from tags “ITUNESADVISORY”: 1 = explicit, 2 = clean, MP4 “rtng”: 1 or 4 = explicit, 2 = clean. See `albumID3` for albums)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExplicitStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"clean")]
        Clean = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"explicit")]
        Explicit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 2,

    }

    /// <summary>
    /// A media.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Child
    {

        /// <summary>
        /// The id of the media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The id of the parent (folder/album)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parent { get; set; }

        /// <summary>
        /// The media is a directory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDir", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDir { get; set; }

        /// <summary>
        /// The media name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// The album name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("album", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Album { get; set; }

        /// <summary>
        /// The artist name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Artist { get; set; }

        /// <summary>
        /// The track number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("track", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Track { get; set; }

        /// <summary>
        /// The media year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Year { get; set; }

        /// <summary>
        /// The media genre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genre", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Genre { get; set; }

        /// <summary>
        /// The coverArt id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coverArt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoverArt { get; set; }

        /// <summary>
        /// A file size of the media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        /// <summary>
        /// The mimeType of the media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        /// <summary>
        /// The file suffix of the media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Suffix { get; set; }

        /// <summary>
        /// The transcoded mediaType if transcoding should happen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transcodedContentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TranscodedContentType { get; set; }

        /// <summary>
        /// The file suffix of the transcoded media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transcodedSuffix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TranscodedSuffix { get; set; }

        /// <summary>
        /// The duration of the media in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Duration { get; set; }

        /// <summary>
        /// The bitrate of the media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bitRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BitRate { get; set; }

        /// <summary>
        /// The bit depth of the media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bitDepth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BitDepth { get; set; }

        /// <summary>
        /// The sampling rate of the media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("samplingRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SamplingRate { get; set; }

        /// <summary>
        /// The number of channels of the media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ChannelCount { get; set; }

        /// <summary>
        /// The full path of the media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// Media is a video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isVideo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsVideo { get; set; }

        /// <summary>
        /// The user rating of the media [1-5]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 5)]
        public int UserRating { get; set; }

        /// <summary>
        /// The average rating of the media [1.0-5.0]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 5D)]
        public double AverageRating { get; set; }

        /// <summary>
        /// The play count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PlayCount { get; set; }

        /// <summary>
        /// The disc number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DiscNumber { get; set; }

        /// <summary>
        /// Date the media was created. [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// Date the media was starred. [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("starred", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Starred { get; set; }

        /// <summary>
        /// The corresponding album id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("albumId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlbumId { get; set; }

        /// <summary>
        /// The corresponding artist id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artistId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArtistId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GenericMediaType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MediaType MediaType { get; set; }

        /// <summary>
        /// The bookmark position in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookmarkPosition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BookmarkPosition { get; set; }

        /// <summary>
        /// The video original Width
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalWidth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OriginalWidth { get; set; }

        /// <summary>
        /// The video original Height
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalHeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OriginalHeight { get; set; }

        /// <summary>
        /// Date the album was last played. [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("played", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Played { get; set; }

        /// <summary>
        /// The BPM of the song.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bpm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Bpm { get; set; }

        /// <summary>
        /// The comment tag of the song.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        /// <summary>
        /// The song sort name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SortName { get; set; }

        /// <summary>
        /// The track MusicBrainzID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicBrainzId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MusicBrainzId { get; set; }

        /// <summary>
        /// The track ISRC(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isrc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Isrc { get; set; }

        /// <summary>
        /// The list of all genres of the song.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ItemGenre> Genres { get; set; }

        /// <summary>
        /// The list of all song artists of the song. (Note: Only the required `ArtistID3` fields should be returned by default)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artists", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ArtistID3> Artists { get; set; }

        /// <summary>
        /// The single value display artist.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayArtist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayArtist { get; set; }

        /// <summary>
        /// The list of all album artists of the song. (Note: Only the required `ArtistID3` fields should be returned by default)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("albumArtists", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ArtistID3> AlbumArtists { get; set; }

        /// <summary>
        /// The single value display album artist.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayAlbumArtist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayAlbumArtist { get; set; }

        /// <summary>
        /// The list of all contributor artists of the song.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contributors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Contributor> Contributors { get; set; }

        /// <summary>
        /// The single value display composer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayComposer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayComposer { get; set; }

        /// <summary>
        /// The list of all moods of the song.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Moods { get; set; }

        /// <summary>
        /// The replay gain data of the song.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("replayGain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReplayGain ReplayGain { get; set; }

        [Newtonsoft.Json.JsonProperty("explicitStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExplicitStatus ExplicitStatus { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Child FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Child>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Playlist.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Playlist
    {

        /// <summary>
        /// Id of the playlist
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the playlist
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// A comment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        /// <summary>
        /// Owner of the playlist
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// Is the playlist public
        /// </summary>
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Public { get; set; }

        /// <summary>
        /// number of songs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("songCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SongCount { get; set; }

        /// <summary>
        /// Playlist duration in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Duration { get; set; }

        /// <summary>
        /// Creation date [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// Last changed date [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Changed { get; set; }

        /// <summary>
        /// A cover Art Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coverArt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoverArt { get; set; }

        /// <summary>
        /// A list of allowed usernames
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllowedUser { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Playlist FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Playlist>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlaylistWithSongs : Playlist
    {

        /// <summary>
        /// The list of songs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Entry { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlaylistWithSongs FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlaylistWithSongs>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePlaylistSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("playlist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public PlaylistWithSongs Playlist { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreatePlaylistSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreatePlaylistSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested playlist element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatePlaylistResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreatePlaylistSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreatePlaylistResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreatePlaylistResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Share.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Share
    {

        /// <summary>
        /// The share Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The share url
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        /// <summary>
        /// A description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The username
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        /// <summary>
        /// Creation date [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// Share expiration [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Expires { get; set; }

        /// <summary>
        /// Last visit [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastVisited", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastVisited { get; set; }

        /// <summary>
        /// Visit count
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visitCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int VisitCount { get; set; }

        /// <summary>
        /// A list of share
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Entry { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Share FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Share>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Shares.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Shares
    {

        /// <summary>
        /// A list of share
        /// </summary>
        [Newtonsoft.Json.JsonProperty("share", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Share> Share { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Shares FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Shares>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSharesSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("shares", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Shares Shares { get; set; } = new Shares();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateSharesSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateSharesSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested shares element on success. Which in turns contains a single share element for the newly created share
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateSharesResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateSharesSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateSharesResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateSharesResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A record label for an album.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecordLabel
    {

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RecordLabel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecordLabel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A date for a media item that may be just a year, or year-month, or full date.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemDate
    {

        /// <summary>
        /// The year
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Year { get; set; }

        /// <summary>
        /// The month (1-12)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int Month { get; set; }

        /// <summary>
        /// The day (1-31)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("day", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 31)]
        public int Day { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ItemDate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ItemDate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A disc title for an album
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DiscTitle
    {

        /// <summary>
        /// The disc number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Disc { get; set; }

        /// <summary>
        /// The name of the disc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DiscTitle FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DiscTitle>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Album with songs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlbumID3
    {

        /// <summary>
        /// The id of the album
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The album name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The album version name (Remastered, Anniversary Box Set, …).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        /// <summary>
        /// Artist name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Artist { get; set; }

        /// <summary>
        /// The id of the artist
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artistId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArtistId { get; set; }

        /// <summary>
        /// A covertArt id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coverArt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoverArt { get; set; }

        /// <summary>
        /// Number of songs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("songCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SongCount { get; set; }

        /// <summary>
        /// Total duration of the album in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Duration { get; set; }

        /// <summary>
        /// Number of play of the album
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PlayCount { get; set; }

        /// <summary>
        /// Date the album was added. [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// Date the album was added. [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("starred", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Starred { get; set; }

        /// <summary>
        /// The album year
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Year { get; set; }

        /// <summary>
        /// The album genre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genre", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Genre { get; set; }

        /// <summary>
        /// Date the album was last played. [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("played", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Played { get; set; }

        /// <summary>
        /// The user rating of the album. [1-5]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 5)]
        public int UserRating { get; set; }

        /// <summary>
        /// The labels producing the album.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recordLabels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<RecordLabel> RecordLabels { get; set; }

        /// <summary>
        /// The album MusicBrainzID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicBrainzId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MusicBrainzId { get; set; }

        /// <summary>
        /// The list of all genres of the album.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ItemGenre> Genres { get; set; }

        /// <summary>
        /// The list of all album artists of the album.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artists", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ArtistID3> Artists { get; set; }

        /// <summary>
        /// The single value display artist.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayArtist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayArtist { get; set; }

        /// <summary>
        /// The types of this album release. (Album, Compilation, EP, Remix, …).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("releaseTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ReleaseTypes { get; set; }

        /// <summary>
        /// The list of all moods of the album.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Moods { get; set; }

        /// <summary>
        /// The album sort name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sortName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SortName { get; set; }

        /// <summary>
        /// Date the album was originally released.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalReleaseDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemDate OriginalReleaseDate { get; set; }

        /// <summary>
        /// Date the specific edition of the album was released. Note: for files using ID3 tags, releaseDate should generally be read from the TDRL tag. Servers that use a different source for this field should document the behavior.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("releaseDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemDate ReleaseDate { get; set; }

        /// <summary>
        /// True if the album is a compilation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isCompilation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsCompilation { get; set; }

        [Newtonsoft.Json.JsonProperty("explicitStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExplicitStatus ExplicitStatus { get; set; }

        /// <summary>
        /// The list of all disc titles of the album.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("discTitles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DiscTitle> DiscTitles { get; set; }

        /// <summary>
        /// The list of songs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("song", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Song { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AlbumID3 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AlbumID3>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlbumID3WithSongs : AlbumID3
    {

        /// <summary>
        /// The list of songs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("song", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<Child> Song { get; set; } = new System.Collections.Generic.List<Child>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AlbumID3WithSongs FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AlbumID3WithSongs>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAlbumSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("album", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public AlbumID3WithSongs Album { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAlbumSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAlbumSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested album element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAlbumResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetAlbumSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAlbumResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAlbumResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Album info.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlbumInfo
    {

        /// <summary>
        /// Album notes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

        /// <summary>
        /// Album musicBrainzId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicBrainzId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MusicBrainzId { get; set; }

        /// <summary>
        /// Album lastFmUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastFmUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastFmUrl { get; set; }

        /// <summary>
        /// Album smallImageUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("smallImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SmallImageUrl { get; set; }

        /// <summary>
        /// Album mediumImageUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mediumImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediumImageUrl { get; set; }

        /// <summary>
        /// Album largeImageUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("largeImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LargeImageUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AlbumInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AlbumInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAlbumInfoSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("albumInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public AlbumInfo AlbumInfo { get; set; } = new AlbumInfo();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAlbumInfoSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAlbumInfoSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested albumInfo element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAlbumInfoResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetAlbumInfoSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAlbumInfoResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAlbumInfoResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// The list type. Must be one of the following: random, newest, highest, frequent, recent. Since 1.8.0 you can also use alphabeticalByName or alphabeticalByArtist to page through all albums alphabetically, and starred to retrieve starred albums. Since 1.10.1 you can use byYear and byGenre to list albums in a given year range or genre.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AlbumListType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"random")]
        Random = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"newest")]
        Newest = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"highest")]
        Highest = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"frequent")]
        Frequent = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"recent")]
        Recent = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"alphabeticalByName")]
        AlphabeticalByName = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"alphabeticalByArtist")]
        AlphabeticalByArtist = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"starred")]
        Starred = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"byYear")]
        ByYear = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"byGenre")]
        ByGenre = 9,

    }

    /// <summary>
    /// Album list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlbumList
    {

        /// <summary>
        /// Artist albums
        /// </summary>
        [Newtonsoft.Json.JsonProperty("album", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Album { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AlbumList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AlbumList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAlbumListSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("albumList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public AlbumList AlbumList { get; set; } = new AlbumList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAlbumListSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAlbumListSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested albumList element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAlbumListResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetAlbumListSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAlbumListResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAlbumListResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AlbumList2
    {

        /// <summary>
        /// Artist albums
        /// </summary>
        [Newtonsoft.Json.JsonProperty("album", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AlbumID3> Album { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AlbumList2 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AlbumList2>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAlbumList2SuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("albumList2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public AlbumList AlbumList2 { get; set; } = new AlbumList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAlbumList2SuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAlbumList2SuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested albumList2 element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetAlbumList2Response
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetAlbumList2SuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetAlbumList2Response FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetAlbumList2Response>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArtistWithAlbumsID3 : ArtistID3
    {

        /// <summary>
        /// Artist albums
        /// </summary>
        [Newtonsoft.Json.JsonProperty("album", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<AlbumID3> Album { get; set; } = new System.Collections.Generic.List<AlbumID3>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ArtistWithAlbumsID3 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArtistWithAlbumsID3>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetArtistSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("artist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public ArtistWithAlbumsID3 Artist { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetArtistSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetArtistSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested artist element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetArtistResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetArtistSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetArtistResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetArtistResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Artist details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Artist
    {

        /// <summary>
        /// Artist id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Artist name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Artist image url
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artistImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArtistImageUrl { get; set; }

        /// <summary>
        /// Artist starred date [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("starred", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Starred { get; set; }

        /// <summary>
        /// Artist rating [1-5]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 5)]
        public int UserRating { get; set; }

        /// <summary>
        /// Artist average rating [1.0-5.0]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1D, 5D)]
        public double AverageRating { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Artist FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Artist>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Artist info.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArtistInfo
    {

        /// <summary>
        /// Artist biography
        /// </summary>
        [Newtonsoft.Json.JsonProperty("biography", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Biography { get; set; }

        /// <summary>
        /// Artist musicBrainzId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicBrainzId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MusicBrainzId { get; set; }

        /// <summary>
        /// Artist lastFmUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastFmUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastFmUrl { get; set; }

        /// <summary>
        /// Artist smallImageUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("smallImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SmallImageUrl { get; set; }

        /// <summary>
        /// Artist mediumImageUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mediumImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediumImageUrl { get; set; }

        /// <summary>
        /// Artist largeImageUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("largeImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LargeImageUrl { get; set; }

        /// <summary>
        /// Similar artists
        /// </summary>
        [Newtonsoft.Json.JsonProperty("similarArtist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Artist> SimilarArtist { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ArtistInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArtistInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetArtistInfoSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("artistInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public ArtistInfo ArtistInfo { get; set; } = new ArtistInfo();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetArtistInfoSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetArtistInfoSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested artistInfo element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetArtistInfoResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetArtistInfoSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetArtistInfoResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetArtistInfoResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Artist info.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArtistInfo2
    {

        /// <summary>
        /// Artist biography
        /// </summary>
        [Newtonsoft.Json.JsonProperty("biography", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Biography { get; set; }

        /// <summary>
        /// Artist musicBrainzId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicBrainzId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MusicBrainzId { get; set; }

        /// <summary>
        /// Artist lastFmUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastFmUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastFmUrl { get; set; }

        /// <summary>
        /// Artist smallImageUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("smallImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SmallImageUrl { get; set; }

        /// <summary>
        /// Artist mediumImageUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mediumImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediumImageUrl { get; set; }

        /// <summary>
        /// Artist largeImageUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("largeImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LargeImageUrl { get; set; }

        /// <summary>
        /// Similar artists
        /// </summary>
        [Newtonsoft.Json.JsonProperty("similarArtist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ArtistID3> SimilarArtist { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ArtistInfo2 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArtistInfo2>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetArtistInfo2SuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("artistInfo2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public ArtistInfo2 ArtistInfo2 { get; set; } = new ArtistInfo2();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetArtistInfo2SuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetArtistInfo2SuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested artistInfo2 element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetArtistInfo2Response
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetArtistInfo2SuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetArtistInfo2Response FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetArtistInfo2Response>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A list of indexed Artists.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArtistsID3
    {

        /// <summary>
        /// List of ignored articles space separated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ignoredArticles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IgnoredArticles { get; set; }

        /// <summary>
        /// Index list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ArtistID3> Index { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ArtistsID3 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArtistsID3>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetArtistsSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("artists", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public ArtistsID3 Artists { get; set; } = new ArtistsID3();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetArtistsSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetArtistsSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested artists element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetArtistsResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetArtistsSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetArtistsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetArtistsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A bookmark.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bookmark
    {

        /// <summary>
        /// Bookmark position in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        /// <summary>
        /// Username
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        /// <summary>
        /// Bookmark comment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        /// <summary>
        /// Bookmark creation date [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// Bookmark last updated date [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Changed { get; set; }

        /// <summary>
        /// The bookmark file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Child Entry { get; set; } = new Child();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Bookmark FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Bookmark>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Bookmarks list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Bookmarks
    {

        /// <summary>
        /// List of bookmark
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bookmark", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Bookmark> Bookmark { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Bookmarks FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Bookmarks>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetBookmarksSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("bookmarks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Bookmarks Bookmarks { get; set; } = new Bookmarks();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetBookmarksSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetBookmarksSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested bookmarks element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetBookmarksResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetBookmarksSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetBookmarksResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetBookmarksResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A chatMessage.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChatMessage
    {

        /// <summary>
        /// Username
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        /// <summary>
        /// Time in millis since Jan 1 1970
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Time { get; set; }

        /// <summary>
        /// The message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChatMessage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChatMessage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Chat messages list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChatMessages
    {

        /// <summary>
        /// List of chatMessage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chatMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ChatMessage> ChatMessage { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChatMessages FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChatMessages>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetChatMessagesSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("chatMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public ChatMessages ChatMessages { get; set; } = new ChatMessages();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetChatMessagesSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetChatMessagesSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested chatMessages element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetChatMessagesResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetChatMessagesSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetChatMessagesResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetChatMessagesResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A genre.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Genre
    {

        /// <summary>
        /// Genre name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        /// <summary>
        /// Genre song count
        /// </summary>
        [Newtonsoft.Json.JsonProperty("songCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SongCount { get; set; }

        /// <summary>
        /// Genre album count
        /// </summary>
        [Newtonsoft.Json.JsonProperty("albumCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AlbumCount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Genre FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Genre>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Genres list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Genres
    {

        /// <summary>
        /// List of genre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genre", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Genre> Genre { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Genres FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Genres>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetGenresSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("genres", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Genres Genres { get; set; } = new Genres();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetGenresSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetGenresSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested genres element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetGenresResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetGenresSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetGenresResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetGenresResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// An indexed artist list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Index
    {

        /// <summary>
        /// Index name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Artist list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Artist> Artist { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Index FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Index>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Artist list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Indexes
    {

        /// <summary>
        /// The ignored articles
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ignoredArticles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IgnoredArticles { get; set; }

        /// <summary>
        /// Last time the index was modified in milliseconds after January 1, 1970 UTC
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LastModified { get; set; }

        /// <summary>
        /// Shortcut
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortcut", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Artist> Shortcut { get; set; }

        /// <summary>
        /// Array of children
        /// </summary>
        [Newtonsoft.Json.JsonProperty("child", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Child { get; set; }

        /// <summary>
        /// Indexed artists
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Index> Index { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Indexes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Indexes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetIndexesSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("indexes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Indexes Indexes { get; set; } = new Indexes();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetIndexesSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetIndexesSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested indexes element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetIndexesResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetIndexesSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetIndexesResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetIndexesResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// An internetRadioStation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternetRadioStation
    {

        /// <summary>
        /// The Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The streamUrl
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streamUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StreamUrl { get; set; }

        /// <summary>
        /// Genre name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homePageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HomePageUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InternetRadioStation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InternetRadioStation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// internetRadioStations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InternetRadioStations
    {

        /// <summary>
        /// A list of internetRadioStation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internetRadioStation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<InternetRadioStation> InternetRadioStation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static InternetRadioStations FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<InternetRadioStations>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetInternetRadioStationsSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("internetRadioStations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public InternetRadioStations InternetRadioStations { get; set; } = new InternetRadioStations();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetInternetRadioStationsSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetInternetRadioStationsSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested internetRadioStations element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetInternetRadioStationsResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetInternetRadioStationsSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetInternetRadioStationsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetInternetRadioStationsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// getLicense result.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class License
    {

        /// <summary>
        /// The status of the license
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Valid { get; set; }

        /// <summary>
        /// User email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// End of license date. [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("licenseExpires", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LicenseExpires { get; set; }

        /// <summary>
        /// End of trial date. [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trialExpires", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset TrialExpires { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static License FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<License>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetLicenseSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("license", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public License License { get; set; } = new License();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetLicenseSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetLicenseSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested license element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetLicenseResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetLicenseSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetLicenseResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetLicenseResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Lyrics.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Lyrics
    {

        /// <summary>
        /// The lyrics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        /// <summary>
        /// The artist name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Artist { get; set; }

        /// <summary>
        /// The song title
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Lyrics FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Lyrics>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetLyricsSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("lyrics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Lyrics Lyrics { get; set; } = new Lyrics();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetLyricsSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetLyricsSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested lyrics element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetLyricsResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetLyricsSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetLyricsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetLyricsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// One line of a song lyric
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Line
    {

        /// <summary>
        /// The actual text of this line
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        /// <summary>
        /// The start time of the lyrics, relative to the start time of the track, in milliseconds. If this is not part of synced lyrics, start __must__ be omitted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Start { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Line FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Line>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Structured lyrics
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StructuredLyrics
    {

        /// <summary>
        /// The lyrics language (ideally ISO 639). If the language is unknown (e.g. lrc file), the server must return `und` (ISO standard) or `xxx` (common value for taggers). Ideally, the server will return lang as an ISO 639 (2/3) code. However, tagged files and external lyrics can come with any value as a potential language code, so clients should take care when displaying lang.
        /// <br/>
        /// <br/>Furthermore, there is special behavior for the value xxx. While not an ISO code, it is commonly used by taggers and other parsing software. Clients should treat xxx as not having a specified language (equivalent to the und code).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lang", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Lang { get; set; }

        /// <summary>
        /// True if the lyrics are synced, false otherwise
        /// </summary>
        [Newtonsoft.Json.JsonProperty("synced", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Synced { get; set; }

        /// <summary>
        /// The actual lyrics. Ordered by start time (synced) or appearance order (unsynced)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<Line> Line { get; set; } = new System.Collections.Generic.List<Line>();

        /// <summary>
        /// The artist name to display. This could be the localized name, or any other value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayArtist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayArtist { get; set; }

        /// <summary>
        /// The title to display. This could be the song title (localized), or any other value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayTitle { get; set; }

        /// <summary>
        /// The offset to apply to all lyrics, in milliseconds. Positive means lyrics appear sooner, negative means later. If not included, the offset must be assumed to be 0
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Offset { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StructuredLyrics FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StructuredLyrics>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// List of structured lyrics
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LyricsList
    {

        /// <summary>
        /// Structured lyrics. There can be multiple lyrics of the same type with the same language
        /// </summary>
        [Newtonsoft.Json.JsonProperty("structuredLyrics", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<StructuredLyrics> StructuredLyrics { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LyricsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LyricsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetLyricsBySongIdSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("lyricsList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public LyricsList LyricsList { get; set; } = new LyricsList();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetLyricsBySongIdSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetLyricsBySongIdSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested lyricsList
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetLyricsBySongIdResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetLyricsBySongIdSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetLyricsBySongIdResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetLyricsBySongIdResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Directory.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Directory
    {

        /// <summary>
        /// The id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Parent item
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parent { get; set; }

        /// <summary>
        /// The directory name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Starred date [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("starred", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Starred { get; set; }

        /// <summary>
        /// The user rating [1-5]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 5)]
        public int UserRating { get; set; }

        /// <summary>
        /// The average rating [1-5]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageRating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1D, 5D)]
        public double AverageRating { get; set; }

        /// <summary>
        /// The play count
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PlayCount { get; set; }

        /// <summary>
        /// The directory content
        /// </summary>
        [Newtonsoft.Json.JsonProperty("child", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Child { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Directory FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Directory>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMusicDirectorySuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("directory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Directory Directory { get; set; } = new Directory();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetMusicDirectorySuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetMusicDirectorySuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested directory element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMusicDirectoryResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetMusicDirectorySuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetMusicDirectoryResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetMusicDirectoryResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// MusicFolder.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MusicFolder
    {

        /// <summary>
        /// The id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// The folder name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MusicFolder FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MusicFolder>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// MusicFolders.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MusicFolders
    {

        /// <summary>
        /// The folders
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicFolder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<MusicFolder> MusicFolder { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MusicFolders FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MusicFolders>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMusicFoldersSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("musicFolders", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public MusicFolders MusicFolders { get; set; } = new MusicFolders();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetMusicFoldersSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetMusicFoldersSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested musicFolders element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetMusicFoldersResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetMusicFoldersSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetMusicFoldersResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetMusicFoldersResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// An enumeration of possible podcast statuses
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PodcastStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"new")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"downloading")]
        Downloading = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"skipped")]
        Skipped = 5,

    }

    /// <summary>
    /// A podcast episode.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PodcastEpisode : Child
    {

        /// <summary>
        /// ID used for streaming podcast
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streamId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreamId { get; set; }

        /// <summary>
        /// TID of the podcast channel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Episode description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PodcastStatus Status { get; set; }

        /// <summary>
        /// Date the episode was published [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publishDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset PublishDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PodcastEpisode FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PodcastEpisode>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// NewestPodcasts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NewestPodcasts
    {

        [Newtonsoft.Json.JsonProperty("episode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PodcastEpisode> Episode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NewestPodcasts FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewestPodcasts>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetNewestPodcastsSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("newestPodcasts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public NewestPodcasts NewestPodcasts { get; set; } = new NewestPodcasts();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetNewestPodcastsSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetNewestPodcastsSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `newestPodcasts` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetNewestPodcastsResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetNewestPodcastsSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetNewestPodcastsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetNewestPodcastsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// NowPlayingEntry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NowPlayingEntry : Child
    {

        /// <summary>
        /// The username
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        /// <summary>
        /// Last update
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minutesAgo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MinutesAgo { get; set; }

        /// <summary>
        /// Player Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int PlayerId { get; set; }

        /// <summary>
        /// Player name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playerName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlayerName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NowPlayingEntry FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NowPlayingEntry>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// nowPlaying.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NowPlaying
    {

        /// <summary>
        /// The now playing entries
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<NowPlayingEntry> Entry { get; set; } = new System.Collections.Generic.List<NowPlayingEntry>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NowPlaying FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NowPlaying>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetNowPlayingSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("nowPlaying", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public NowPlaying NowPlaying { get; set; } = new NowPlaying();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetNowPlayingSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetNowPlayingSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `nowPlaying` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetNowPlayingResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetNowPlayingSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetNowPlayingResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetNowPlayingResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A supported OpenSubsonic API extension.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OpenSubsonicExtension
    {

        /// <summary>
        /// The name of the extension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The list of supported versions of the this extension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<int> Versions { get; set; } = new System.Collections.Generic.List<int>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OpenSubsonicExtension FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OpenSubsonicExtension>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetOpenSubsonicExtensionsSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("openSubsonicExtensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<OpenSubsonicExtension> OpenSubsonicExtensions { get; set; } = new System.Collections.Generic.List<OpenSubsonicExtension>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetOpenSubsonicExtensionsSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetOpenSubsonicExtensionsSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `openSubsonicExtensions` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetOpenSubsonicExtensionsResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetOpenSubsonicExtensionsSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetOpenSubsonicExtensionsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetOpenSubsonicExtensionsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPlaylistSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("playlist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public PlaylistWithSongs Playlist { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPlaylistSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPlaylistSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested playlist element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPlaylistResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetPlaylistSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPlaylistResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPlaylistResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Playlists.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Playlists
    {

        /// <summary>
        /// The playlists
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playlist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Playlist> Playlist { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Playlists FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Playlists>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPlaylistsSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("playlists", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Playlists Playlists { get; set; } = new Playlists();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPlaylistsSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPlaylistsSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `playlists` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPlaylistsResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetPlaylistsSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPlaylistsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPlaylistsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// NowPlayingEntry.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayQueue
    {

        /// <summary>
        /// ID of currently playing track
        /// </summary>
        [Newtonsoft.Json.JsonProperty("current", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Current { get; set; }

        /// <summary>
        /// Position in milliseconds of currently playing track
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        /// <summary>
        /// The user this queue belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        /// <summary>
        /// Date modified [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Changed { get; set; }

        /// <summary>
        /// Name of client app
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChangedBy { get; set; }

        /// <summary>
        /// The list of songs in the queue
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Entry { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayQueue FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayQueue>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// NowPlayingEntry with queue index.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlayQueueByIndex
    {

        /// <summary>
        /// index of currently playing track
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CurrentIndex { get; set; }

        /// <summary>
        /// Position in milliseconds of currently playing track
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        /// <summary>
        /// The user this queue belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        /// <summary>
        /// Date modified [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Changed { get; set; }

        /// <summary>
        /// Name of client app
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ChangedBy { get; set; }

        /// <summary>
        /// The list of songs in the queue
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Entry { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PlayQueueByIndex FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlayQueueByIndex>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPlayQueueSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("playQueue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public PlayQueue PlayQueue { get; set; } = new PlayQueue();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPlayQueueSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPlayQueueSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `playQueue` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPlayQueueResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetPlayQueueSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPlayQueueResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPlayQueueResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPlayQueueByIndexSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("playQueueByIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public PlayQueueByIndex PlayQueueByIndex { get; set; } = new PlayQueueByIndex();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPlayQueueByIndexSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPlayQueueByIndexSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `PlayQueueByIndex` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPlayQueueByIndexResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetPlayQueueByIndexSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPlayQueueByIndexResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPlayQueueByIndexResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPodcastEpisodeSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("podcastEpisode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public PodcastEpisode PodcastEpisode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPodcastEpisodeSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPodcastEpisodeSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `podcastEpisode` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPodcastEpisodeResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetPodcastEpisodeSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPodcastEpisodeResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPodcastEpisodeResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A Podcast channel
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PodcastChannel
    {

        /// <summary>
        /// The channel ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Podcast channel URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        /// <summary>
        /// The channel title
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The channel description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// ID used for retrieving cover art
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coverArt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoverArt { get; set; }

        /// <summary>
        /// URL for original image of podcast channel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalImageUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PodcastStatus Status { get; set; }

        /// <summary>
        /// An error message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Podcast episodes with this channel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("episode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PodcastEpisode> Episode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PodcastChannel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PodcastChannel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Podcasts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Podcasts
    {

        /// <summary>
        /// Podcast channel(s)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("channel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PodcastChannel> Channel { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Podcasts FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Podcasts>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPodcastsSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("podcasts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Podcasts Podcasts { get; set; } = new Podcasts();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPodcastsSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPodcastsSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `podcasts` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPodcastsResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetPodcastsSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetPodcastsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetPodcastsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Songs list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Songs
    {

        /// <summary>
        /// List of songs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("song", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Song { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Songs FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Songs>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetRandomSongsSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("randomSongs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Songs RandomSongs { get; set; } = new Songs();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetRandomSongsSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetRandomSongsSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `randomSongs` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetRandomSongsResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetRandomSongsSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetRandomSongsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetRandomSongsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Scan status information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScanStatus
    {

        /// <summary>
        /// The status of the scan
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scanning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scanning { get; set; }

        /// <summary>
        /// Scanned item count
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScanStatus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScanStatus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetScanStatusSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("scanStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public ScanStatus ScanStatus { get; set; } = new ScanStatus();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetScanStatusSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetScanStatusSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `scanStatus` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetScanStatusResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetScanStatusSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetScanStatusResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetScanStatusResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSharesSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("shares", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Shares Shares { get; set; } = new Shares();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetSharesSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSharesSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `shares` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSharesResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetSharesSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetSharesResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSharesResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// SimilarSongs list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SimilarSongs
    {

        /// <summary>
        /// List of songs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("song", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Song { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SimilarSongs FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimilarSongs>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSimilarSongsSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("similarSongs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public SimilarSongs SimilarSongs { get; set; } = new SimilarSongs();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetSimilarSongsSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSimilarSongsSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `similarSongs` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSimilarSongsResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetSimilarSongsSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetSimilarSongsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSimilarSongsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// SimilarSongs2 list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SimilarSongs2
    {

        /// <summary>
        /// List of songs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("song", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Song { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SimilarSongs2 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimilarSongs2>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSimilarSongs2SuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("similarSongs2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public SimilarSongs2 SimilarSongs2 { get; set; } = new SimilarSongs2();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetSimilarSongs2SuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSimilarSongs2SuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `similarSongs2` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSimilarSongs2Response
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetSimilarSongs2SuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetSimilarSongs2Response FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSimilarSongs2Response>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSongSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("song", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Child Song { get; set; } = new Child();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetSongSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSongSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `song` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSongResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetSongSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetSongResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSongResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSongsByGenreSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("songsByGenre", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Songs SongsByGenre { get; set; } = new Songs();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetSongsByGenreSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSongsByGenreSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `songsByGenre` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetSongsByGenreResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetSongsByGenreSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetSongsByGenreResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetSongsByGenreResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// starred.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Starred
    {

        /// <summary>
        /// Starred artists
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Artist> Artist { get; set; }

        /// <summary>
        /// Starred albums
        /// </summary>
        [Newtonsoft.Json.JsonProperty("album", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Album { get; set; }

        /// <summary>
        /// Starred songs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("song", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Song { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Starred FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Starred>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetStarredSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("starred", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Starred Starred { get; set; } = new Starred();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetStarredSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStarredSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `starred` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetStarredResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetStarredSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetStarredResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStarredResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Starred2.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Starred2
    {

        /// <summary>
        /// Starred artists
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ArtistID3> Artist { get; set; }

        /// <summary>
        /// Starred albums
        /// </summary>
        [Newtonsoft.Json.JsonProperty("album", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AlbumID3> Album { get; set; }

        /// <summary>
        /// Starred songs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("song", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Song { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Starred2 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Starred2>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetStarred2SuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("starred2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Starred2 Starred2 { get; set; } = new Starred2();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetStarred2SuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStarred2SuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `starred2` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetStarred2Response
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetStarred2SuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetStarred2Response FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetStarred2Response>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// TopSongs list.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TopSongs
    {

        /// <summary>
        /// List of songs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("song", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Song { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TopSongs FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TopSongs>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTopSongsSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("topSongs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public TopSongs TopSongs { get; set; } = new TopSongs();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetTopSongsSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTopSongsSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `topSongs` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTopSongsResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetTopSongsSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetTopSongsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTopSongsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {

        /// <summary>
        /// Username
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        /// <summary>
        /// Scrobbling enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scrobblingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ScrobblingEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("maxBitRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxBitRate { get; set; }

        /// <summary>
        /// Whether the user is an admin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adminRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AdminRole { get; set; }

        /// <summary>
        /// Whether the user is can edit settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settingsRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SettingsRole { get; set; }

        /// <summary>
        /// Whether the user can download
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloadRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DownloadRole { get; set; }

        /// <summary>
        /// Whether the user can upload
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uploadRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UploadRole { get; set; }

        /// <summary>
        /// Whether the user can create playlists
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playlistRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PlaylistRole { get; set; }

        /// <summary>
        /// Whether the user can get cover art
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coverArtRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CoverArtRole { get; set; }

        /// <summary>
        /// Whether the user can create comments
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commentRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CommentRole { get; set; }

        /// <summary>
        /// Whether the user can create/refresh podcasts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("podcastRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PodcastRole { get; set; }

        /// <summary>
        /// Whether the user can stream
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streamRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool StreamRole { get; set; }

        /// <summary>
        /// Whether the user can control the jukebox
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jukeboxRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool JukeboxRole { get; set; }

        /// <summary>
        /// Whether the user can create a stream
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareRole { get; set; }

        /// <summary>
        /// Whether the user can convert videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("videoConversionRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool VideoConversionRole { get; set; }

        /// <summary>
        /// Last time the avatar was changed [ISO 8601]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarLastChanged", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset AvatarLastChanged { get; set; }

        /// <summary>
        /// Folder ID(s)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("folder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Folder { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static User FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUserSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public User User { get; set; } = new User();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetUserSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetUserSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `user` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUserResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetUserSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetUserResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetUserResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// users.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Users
    {

        /// <summary>
        /// Array of users
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<User> User { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Users FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Users>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUsersSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Users Users { get; set; } = new Users();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetUsersSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetUsersSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `user` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetUsersResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetUsersSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetUsersResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetUsersResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// videoInfo. TODO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoInfo
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VideoInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VideoInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetVideoInfoSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("videoInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public VideoInfo VideoInfo { get; set; } = new VideoInfo();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetVideoInfoSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetVideoInfoSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `videoInfo` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetVideoInfoResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetVideoInfoSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetVideoInfoResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetVideoInfoResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// videos. TODO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Videos
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Videos FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Videos>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetVideosSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("videos", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Videos Videos { get; set; } = new Videos();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetVideosSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetVideosSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `videos` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetVideosResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetVideosSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetVideosResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetVideosResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// JukeBox action.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum JukeboxAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"get")]
        Get = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"status")]
        Status = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"set")]
        Set = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"start")]
        Start = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"stop")]
        Stop = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"skip")]
        Skip = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"add")]
        Add = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"clear")]
        Clear = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"remove")]
        Remove = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"shuffle")]
        Shuffle = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"setGain")]
        SetGain = 10,

    }

    /// <summary>
    /// jukeboxStatus.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JukeboxStatus
    {

        /// <summary>
        /// The current index of the song being played
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CurrentIndex { get; set; }

        /// <summary>
        /// Whether the queue is currently playing
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Playing { get; set; }

        /// <summary>
        /// Volume, in a range of [0.0, 1.0]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("volume", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0F, 1F)]
        public int Volume { get; set; }

        /// <summary>
        /// The current position of the track in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JukeboxStatus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JukeboxStatus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JukeboxPlaylist : JukeboxStatus
    {

        /// <summary>
        /// The songs currently enqueued in the jukebox
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Entry { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JukeboxPlaylist FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JukeboxPlaylist>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JukeboxControlSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("jukeboxStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JukeboxStatus JukeboxStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("jukeboxPlaylist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JukeboxPlaylist JukeboxPlaylist { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JukeboxControlSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JukeboxControlSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested :
    /// <br/>
    /// <br/>- jukeboxStatus for all actions but get
    /// <br/>- jukeboxPlaylist for get action
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JukeboxControlResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JukeboxControlSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JukeboxControlResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JukeboxControlResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// searchResult. TODO
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchResult
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("searchResult", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public SearchResult SearchResult { get; set; } = new SearchResult();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `searchResult` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SearchSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// searchResult2
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchResult2
    {

        /// <summary>
        /// Starred artists
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Artist> Artist { get; set; }

        /// <summary>
        /// Starred albums
        /// </summary>
        [Newtonsoft.Json.JsonProperty("album", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Album { get; set; }

        /// <summary>
        /// Starred songs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("song", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Song { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchResult2 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResult2>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Search2SuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("searchResult2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public SearchResult2 SearchResult2 { get; set; } = new SearchResult2();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Search2SuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Search2SuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `searchResult2` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Search2Response
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Search2SuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Search2Response FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Search2Response>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// searchResult3
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchResult3
    {

        /// <summary>
        /// Matching artists
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ArtistID3> Artist { get; set; }

        /// <summary>
        /// Matching albums
        /// </summary>
        [Newtonsoft.Json.JsonProperty("album", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AlbumID3> Album { get; set; }

        /// <summary>
        /// Matching songs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("song", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Child> Song { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchResult3 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResult3>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Search3SuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("searchResult3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public SearchResult3 SearchResult3 { get; set; } = new SearchResult3();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Search3SuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Search3SuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `searchResult3` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Search3Response
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Search3SuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Search3Response FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Search3Response>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StartScanSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("scanStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public ScanStatus ScanStatus { get; set; } = new ScanStatus();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StartScanSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StartScanSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested `scanStatus` element on success.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StartScanResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StartScanSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StartScanResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StartScanResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// Information about an API key
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TokenInfo
    {

        /// <summary>
        /// Username associated with token
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TokenInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TokenInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTokenInfoSuccessResponse : SubsonicSuccessResponse
    {

        [Newtonsoft.Json.JsonProperty("tokenInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public TokenInfo TokenInfo { get; set; } = new TokenInfo();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetTokenInfoSuccessResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTokenInfoSuccessResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    /// <summary>
    /// A subsonic-response element with a nested tokenInfo on success, or error 44 on invalid token.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetTokenInfoResponse
    {

        [Newtonsoft.Json.JsonProperty("subsonic-response", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GetTokenInfoSuccessResponse SubsonicResponse { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GetTokenInfoResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetTokenInfoResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {

        /// <summary>
        /// The chat message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body2
    {

        /// <summary>
        /// The name of the user which should change its password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        /// <summary>
        /// The new password of the new user, either in clear text of hex-encoded (see above).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body2 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body2>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body3
    {

        /// <summary>
        /// ID of the media file to bookmark. If a bookmark already exists for this file it will be overwritten.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The position (in milliseconds) within the media file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        /// <summary>
        /// A user-defined comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body3 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body3>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body4
    {

        /// <summary>
        /// The stream URL for the station.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streamUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StreamUrl { get; set; }

        /// <summary>
        /// The station name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The home page URL for the station.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homepageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HomepageUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body4 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body4>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body5
    {

        /// <summary>
        /// The playlist ID. Required if updating an existing playlist.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playlistId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlaylistId { get; set; }

        /// <summary>
        /// The human-readable name of the playlist. Required if creating a new playlist.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// ID of a song in the playlist. Use one `songId` parameter for each song in the playlist.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("songId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SongId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body5 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body5>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body6
    {

        /// <summary>
        /// The URL of the Podcast to add.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body6 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body6>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body7
    {

        /// <summary>
        /// ID of a song, album or video to share. Use one id parameter for each entry to share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<string> Id { get; set; } = new System.Collections.Generic.List<string>();

        /// <summary>
        /// A user-defined description that will be displayed to people visiting the shared media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The time at which the share expires. Given as milliseconds since 1970.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Expires { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body7 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body7>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body8
    {

        /// <summary>
        /// The name of the new user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        /// <summary>
        /// The password of the new user, either in clear text or hex-encoded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>
        /// The email address of the new user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        /// <summary>
        /// Whether the user is authenticated in LDAP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ldapAuthenticated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LdapAuthenticated { get; set; } = false;

        /// <summary>
        /// Whether the user is administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adminRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AdminRole { get; set; } = false;

        /// <summary>
        /// Whether the user is allowed to change personal settings and password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settingsRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SettingsRole { get; set; } = true;

        /// <summary>
        /// Whether the user is allowed to play files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streamRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool StreamRole { get; set; } = true;

        /// <summary>
        /// Whether the user is allowed to play files in jukebox mode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jukeboxRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool JukeboxRole { get; set; } = false;

        /// <summary>
        /// Whether the user is allowed to download files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloadRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DownloadRole { get; set; } = false;

        /// <summary>
        /// Whether the user is allowed to upload files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uploadRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UploadRole { get; set; } = false;

        /// <summary>
        /// Whether the user is allowed to create and delete playlists. Since 1.8.0, changing this role has no effect.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playlistRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PlaylistRole { get; set; } = false;

        /// <summary>
        /// Whether the user is allowed to change cover art and tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coverArtRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CoverArtRole { get; set; } = false;

        /// <summary>
        /// Whether the user is allowed to create and edit comments and ratings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commentRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CommentRole { get; set; } = false;

        /// <summary>
        /// Whether the user is allowed to administrate Podcasts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("podcastRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PodcastRole { get; set; } = false;

        /// <summary>
        /// (Since 1.8.0) Whether the user is allowed to share files with anyone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareRole { get; set; } = false;

        /// <summary>
        /// (Since 1.15.0) Whether the user is allowed to start video conversions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("videoConversionRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool VideoConversionRole { get; set; } = false;

        /// <summary>
        /// (Since 1.12.0) IDs of the music folders the user is allowed access to. Include the parameter once for each folder. Default all folders.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicFolderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MusicFolderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body8 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body8>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body9
    {

        /// <summary>
        /// ID of the media file for which to delete the bookmark. Other users’ bookmarks are not affected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body9 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body9>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body10
    {

        /// <summary>
        /// The ID for the station.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body10 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body10>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body11
    {

        /// <summary>
        /// ID of the playlist to delete, as obtained by `getPlaylists`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body11 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body11>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body12
    {

        /// <summary>
        /// The ID of the Podcast channel to delete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body12 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body12>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body13
    {

        /// <summary>
        /// The ID of the Podcast episode to delete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body13 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body13>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body14
    {

        /// <summary>
        /// ID of the share to delete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body14 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body14>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body15
    {

        /// <summary>
        /// The name of the user to delete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body15 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body15>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body16
    {

        /// <summary>
        /// A string which uniquely identifies the file to download. Obtained by calls to getMusicDirectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body16 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body16>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body17
    {

        /// <summary>
        /// The ID of the Podcast episode to download.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body17 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body17>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body18
    {

        /// <summary>
        /// The album ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body18 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body18>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body19
    {

        /// <summary>
        /// The album ID or song ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body19 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body19>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body20
    {

        /// <summary>
        /// The album ID or song ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body20 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body20>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body21
    {

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlbumListType Type { get; set; }

        /// <summary>
        /// The number of albums to return. Max 500.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 500)]
        public int Size { get; set; } = 10;

        /// <summary>
        /// The list offset. Useful if you for example want to page through the list of newest albums.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Offset { get; set; } = 0;

        /// <summary>
        /// Required if `type=='byYear'`. The first year in the range. If `fromYear` &gt; `toYear` a reverse chronological list is returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FromYear { get; set; }

        /// <summary>
        /// Required if `type=='byYear'`. The last year in the range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ToYear { get; set; }

        /// <summary>
        /// Required if `type=='byGenre'`. The name of the genre, e.g., “Rock”.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genre", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Genre { get; set; }

        /// <summary>
        /// (Since 1.11.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicFolderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MusicFolderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body21 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body21>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body22
    {

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlbumListType Type { get; set; }

        /// <summary>
        /// The number of albums to return. Max 500.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 500)]
        public int Size { get; set; } = 10;

        /// <summary>
        /// The list offset. Useful if you for example want to page through the list of newest albums.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Offset { get; set; } = 0;

        /// <summary>
        /// Required if `type=='byYear'`. The first year in the range. If `fromYear` &gt; `toYear` a reverse chronological list is returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FromYear { get; set; }

        /// <summary>
        /// Required if `type=='byYear'`. The last year in the range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ToYear { get; set; }

        /// <summary>
        /// Required if `type=='byGenre'`. The name of the genre, e.g., “Rock”.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genre", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Genre { get; set; }

        /// <summary>
        /// (Since 1.11.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicFolderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MusicFolderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body22 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body22>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body23
    {

        /// <summary>
        /// The artist ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body23 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body23>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body24
    {

        /// <summary>
        /// The artist, album or song ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Max number of similar artists to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Count { get; set; } = 20;

        /// <summary>
        /// Whether to return artists that are not present in the media library.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeNotPresent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeNotPresent { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body24 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body24>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body25
    {

        /// <summary>
        /// The artist, album or song ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Max number of similar artists to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Count { get; set; } = 20;

        /// <summary>
        /// Whether to return artists that are not present in the media library.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeNotPresent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeNotPresent { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body25 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body25>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body26
    {

        /// <summary>
        /// If specified, only return artists in the music folder with the given ID. See `getMusicFolders`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicFolderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MusicFolderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body26 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body26>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body27
    {

        /// <summary>
        /// The username for which to retrieve the avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body27 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body27>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Format
    {

        [System.Runtime.Serialization.EnumMember(Value = @"srt")]
        Srt = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"vtt")]
        Vtt = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body28
    {

        /// <summary>
        /// The ID of the video.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Preferred captions format (“srt” or “vtt”).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Body28Format Format { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body28 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body28>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body29
    {

        /// <summary>
        /// The coverArt ID. Returned by most entities likes `Child` or `AlbumID3`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// If specified, scale image to this size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body29 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body29>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body30
    {

        /// <summary>
        /// If specified, only return artists in the music folder with the given ID. See `getMusicFolders`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicFolderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MusicFolderId { get; set; }

        /// <summary>
        /// If specified, only return a result if the artist collection has changed since the given time (in milliseconds since 1 Jan 1970).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ifModifiedSince", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IfModifiedSince { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body30 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body30>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body31
    {

        /// <summary>
        /// The artist name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Artist { get; set; }

        /// <summary>
        /// The song title.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body31 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body31>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body32
    {

        /// <summary>
        /// The track ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body32 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body32>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body33
    {

        /// <summary>
        /// A string which uniquely identifies the music folder. Obtained by calls to `getIndexes` or `getMusicDirectory`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body33 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body33>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body34
    {

        /// <summary>
        /// The maximum number of episodes to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; } = 20;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body34 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body34>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body35
    {

        /// <summary>
        /// ID of the playlist to return, as obtained by `getPlaylists`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body35 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body35>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body36
    {

        /// <summary>
        /// (Since 1.8.0) If specified, return playlists for this user rather than for the authenticated user. The authenticated user must have admin role if this parameter is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body36 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body36>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body37
    {

        /// <summary>
        /// The podcast episode ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body37 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body37>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body38
    {

        /// <summary>
        /// (Since 1.9.0) If specified, only return the Podcast channel with this ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// (Since 1.9.0) Whether to include Podcast episodes in the returned result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeEpisodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeEpisodes { get; set; } = true;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body38 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body38>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body39
    {

        /// <summary>
        /// The maximum number of songs to return. Max 500.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 500)]
        public int Size { get; set; } = 10;

        /// <summary>
        /// Only returns songs belonging to this genre.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genre", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Genre { get; set; }

        /// <summary>
        /// (Since 1.9.0) Only return songs from this year or later.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FromYear { get; set; }

        /// <summary>
        /// Only return songs published before or in this year.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ToYear { get; set; }

        /// <summary>
        /// Only return songs in the music folder with the given ID. See `getMusicFolders`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicFolderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MusicFolderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body39 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body39>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body40
    {

        /// <summary>
        /// The artist, album or song ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Max number of songs to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Count { get; set; } = 50;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body40 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body40>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body41
    {

        /// <summary>
        /// The artist, album or song ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Max number of songs to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Count { get; set; } = 50;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body41 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body41>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body42
    {

        /// <summary>
        /// The song ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body42 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body42>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body43
    {

        /// <summary>
        /// The genre, as returned by `getGenres`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genre", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Genre { get; set; }

        /// <summary>
        /// The maximum number of songs to return. Max 500.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 500)]
        public int Count { get; set; } = 10;

        /// <summary>
        /// The offset. Useful if you want to page through the songs in a genre.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Offset { get; set; } = 0;

        /// <summary>
        /// (Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicFolderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MusicFolderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body43 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body43>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body44
    {

        /// <summary>
        /// The artist name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The maximum number of songs to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Count { get; set; } = 50;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body44 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body44>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body45
    {

        /// <summary>
        /// The name of the user to retrieve. You can only retrieve your own user unless you have admin privileges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body45 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body45>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body46
    {

        /// <summary>
        /// The video ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body46 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body46>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body47
    {

        /// <summary>
        /// A string which uniquely identifies the media file to stream.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// If specified, the server will attempt to limit the bitrate to this value, in kilobits per second. If set to zero, no limit is imposed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bitRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BitRate { get; set; }

        /// <summary>
        /// The ID of the audio track to use. See `getVideoInfo` for how to get the list of available audio tracks for a video.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("audioTrack", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AudioTrack { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body47 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body47>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body48
    {

        /// <summary>
        /// The operation to perform. Must be one of: get, status (since 1.7.0), set (since 1.7.0), start, stop, skip, add, clear, remove, shuffle, setGain
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Body48Action Action { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body48 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body48>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body49
    {

        /// <summary>
        /// ID of a song in the play queue. Use one id parameter for each song in the play queue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the current playing song.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("current", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Current { get; set; }

        /// <summary>
        /// The position in milliseconds within the currently playing song.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Position { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body49 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body49>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body50
    {

        /// <summary>
        /// ID of a song in the play queue. Use one id parameter for each song in the play queue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the current playing song.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("current", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Current { get; set; }

        /// <summary>
        /// The position in milliseconds within the currently playing song.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Position { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body50 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body50>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body51
    {

        /// <summary>
        /// A string which uniquely identifies the file to scrobble.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// (Since 1.8.0) The time (in milliseconds since 1 Jan 1970) at which the song was listened to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Time { get; set; }

        /// <summary>
        /// Whether this is a “submission” or a “now playing” notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Submission { get; set; } = true;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body51 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body51>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body52
    {

        /// <summary>
        /// Artist to search for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artist", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Artist { get; set; }

        /// <summary>
        /// Album to search for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("album", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Album { get; set; }

        /// <summary>
        /// Song title to search for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Searches all fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("any", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Any { get; set; } = false;

        /// <summary>
        /// Maximum number of results to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Count { get; set; } = 20;

        /// <summary>
        /// Search result offset. Used for paging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Offset { get; set; } = 0;

        /// <summary>
        /// Only return matches that are newer than this. Given as milliseconds since 1970.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newerThan", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int NewerThan { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body52 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body52>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body53
    {

        /// <summary>
        /// Search query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Query { get; set; }

        /// <summary>
        /// Maximum number of artists to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artistCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int ArtistCount { get; set; } = 20;

        /// <summary>
        /// Search result offset for artists. Used for paging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artistOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int ArtistOffset { get; set; } = 0;

        /// <summary>
        /// Maximum number of albums to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("albumCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int AlbumCount { get; set; } = 20;

        /// <summary>
        /// Search result offset for albums. Used for paging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("albumOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int AlbumOffset { get; set; } = 0;

        /// <summary>
        /// Maximum number of songs to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("songCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int SongCount { get; set; } = 20;

        /// <summary>
        /// Search result offset for songs. Used for paging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("songOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int SongOffset { get; set; } = 0;

        /// <summary>
        /// (Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicFolderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MusicFolderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body53 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body53>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body54
    {

        /// <summary>
        /// Search query. Servers must support an empty query and return all the data to allow clients to properly access all the media information for offline sync.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Query { get; set; }

        /// <summary>
        /// Maximum number of artists to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artistCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int ArtistCount { get; set; } = 20;

        /// <summary>
        /// Search result offset for artists. Used for paging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artistOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int ArtistOffset { get; set; } = 0;

        /// <summary>
        /// Maximum number of albums to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("albumCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int AlbumCount { get; set; } = 20;

        /// <summary>
        /// Search result offset for albums. Used for paging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("albumOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int AlbumOffset { get; set; } = 0;

        /// <summary>
        /// Maximum number of songs to return.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("songCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int SongCount { get; set; } = 20;

        /// <summary>
        /// Search result offset for songs. Used for paging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("songOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int SongOffset { get; set; } = 0;

        /// <summary>
        /// (Since 1.12.0) Only return albums in the music folder with the given ID. See `getMusicFolders`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicFolderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MusicFolderId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body54 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body54>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body55
    {

        /// <summary>
        /// A string which uniquely identifies the file (song) or folder (album/artist) to rate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The rating between 1 and 5 (inclusive), or 0 to remove the rating.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 5)]
        public int Rating { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body55 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body55>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body56
    {

        /// <summary>
        /// The ID of the file (song) or folder (album/artist) to star. Multiple parameters allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Id { get; set; }

        /// <summary>
        /// The ID of an album to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("albumId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AlbumId { get; set; }

        /// <summary>
        /// The ID of an artist to star. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artistId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ArtistId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body56 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body56>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body57
    {

        /// <summary>
        /// A string which uniquely identifies the file to stream. Obtained by calls to getMusicDirectory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// (Since 1.2.0) If specified, the server will attempt to limit the bitrate to this value, in kilobits per second. If set to zero, no limit is imposed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxBitRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MaxBitRate { get; set; }

        /// <summary>
        /// (Since 1.6.0) Specifies the preferred target format (e.g., “mp3” or “flv”) in case there are multiple applicable transcodings. Starting with 1.9.0 you can use the special value “raw” to disable transcoding.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

        /// <summary>
        /// By default only applicable to video streaming. If specified, start streaming at the given offset (in seconds) into the media. The `Transcode Offset` extension enables the parameter to music too.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int TimeOffset { get; set; }

        /// <summary>
        /// (Since 1.6.0) Only applicable to video streaming. Requested video size specified as WxH, for instance “640x480”.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]+x[0-9]+$")]
        public string Size { get; set; }

        /// <summary>
        /// (Since 1.8.0). If set to “true”, the Content-Length HTTP header will be set to an estimated value for transcoded or downsampled media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimateContentLength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EstimateContentLength { get; set; } = false;

        /// <summary>
        /// (Since 1.14.0) Only applicable to video streaming. Servers can optimize videos for streaming by converting them to MP4. If a conversion exists for the video in question, then setting this parameter to “true” will cause the converted video to be returned instead of the original.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("converted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Converted { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body57 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body57>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body58
    {

        /// <summary>
        /// The ID of the file (song) or folder (album/artist) to unstar. Multiple parameters allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Id { get; set; }

        /// <summary>
        /// The ID of an album to unstar. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("albumId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object AlbumId { get; set; }

        /// <summary>
        /// The ID of an artist to unstar. Use this rather than `id` if the client accesses the media collection according to ID3 tags rather than file structure. Multiple parameters allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("artistId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object ArtistId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body58 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body58>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body59
    {

        /// <summary>
        /// The ID of the station.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The stream URL for the station.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streamUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StreamUrl { get; set; }

        /// <summary>
        /// The user-defined name for the station.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The home page URL for the station.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homepageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HomepageUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body59 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body59>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body60
    {

        /// <summary>
        /// The playlist ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("playlistId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PlaylistId { get; set; }

        /// <summary>
        /// The human-readable name of the playlist.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The playlist comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        /// <summary>
        /// `true` if the playlist should be visible to all users, `false` otherwise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("public", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Public { get; set; }

        /// <summary>
        /// Add this song with this ID to the playlist. Multiple parameters allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("songIdToAdd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SongIdToAdd { get; set; }

        /// <summary>
        /// Remove the song at this position in the playlist. Multiple parameters allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("songIndexToRemove", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> SongIndexToRemove { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body60 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body60>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body61
    {

        /// <summary>
        /// ID of the share to update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// A user-defined description that will be displayed to people visiting the shared media.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The time at which the share expires. Given as milliseconds since 1970, or zero to remove the expiration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Expires { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body61 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body61>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MaxBitRate
    {

        _0 = 0,

        _32 = 32,

        _40 = 40,

        _48 = 48,

        _56 = 56,

        _64 = 64,

        _80 = 80,

        _96 = 96,

        _112 = 112,

        _128 = 128,

        _160 = 160,

        _192 = 192,

        _224 = 224,

        _256 = 256,

        _320 = 320,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body62
    {

        /// <summary>
        /// The name of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }

        /// <summary>
        /// The password of the user, either in clear text or hex-encoded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>
        /// The email address of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Whether the user is authenticated in LDAP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ldapAuthenticated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LdapAuthenticated { get; set; } = false;

        /// <summary>
        /// Whether the user is an administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adminRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AdminRole { get; set; } = false;

        /// <summary>
        /// Whether the user is allowed to change personal settings and password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settingsRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SettingsRole { get; set; } = true;

        /// <summary>
        /// Whether the user is allowed to play files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streamRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool StreamRole { get; set; } = true;

        /// <summary>
        /// Whether the user is allowed to play files in jukebox mode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jukeboxRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool JukeboxRole { get; set; } = false;

        /// <summary>
        /// Whether the user is allowed to download files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("downloadRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DownloadRole { get; set; } = false;

        /// <summary>
        /// Whether the user is allowed to upload files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uploadRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UploadRole { get; set; } = false;

        /// <summary>
        /// Whether the user is allowed to change cover art and tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coverArtRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CoverArtRole { get; set; } = false;

        /// <summary>
        /// Whether the user is allowed to create and edit comments and ratings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commentRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CommentRole { get; set; } = false;

        /// <summary>
        /// Whether the user is allowed to administrate Podcasts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("podcastRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PodcastRole { get; set; } = false;

        /// <summary>
        /// Whether the user is allowed to share files with anyone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shareRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShareRole { get; set; } = false;

        /// <summary>
        /// (Since 1.15.0) Whether the user is allowed to start video conversions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("videoConversionRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool VideoConversionRole { get; set; } = false;

        /// <summary>
        /// (Since 1.12.0) IDs of the music folders the user is allowed access to. Include the parameter once for each folder.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("musicFolderId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> MusicFolderId { get; set; }

        /// <summary>
        /// (Since 1.13.0) The maximum bit rate (in Kbps) for the user. Audio streams of higher bit rates are automatically downsampled to this bit rate. Legal values: 0 (no limit), 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxBitRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Body62MaxBitRate MaxBitRate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Body62 FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Body62>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubsonicErrorCode
    {

        _0 = 0,

        _10 = 10,

        _20 = 20,

        _30 = 30,

        _40 = 40,

        _41 = 41,

        _42 = 42,

        _43 = 43,

        _44 = 44,

        _50 = 50,

        _60 = 60,

        _70 = 70,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubsonicSuccessResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ok")]
        Ok = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SubsonicFailureResponseStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"failed")]
        Failed = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body28Format
    {

        [System.Runtime.Serialization.EnumMember(Value = @"srt")]
        Srt = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"vtt")]
        Vtt = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body48Action
    {

        [System.Runtime.Serialization.EnumMember(Value = @"get")]
        Get = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"status")]
        Status = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"start")]
        Start = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"stop")]
        Stop = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"clear")]
        Clear = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"shuffle")]
        Shuffle = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Body62MaxBitRate
    {

        _0 = 0,

        _32 = 32,

        _40 = 40,

        _48 = 48,

        _56 = 56,

        _64 = 64,

        _80 = 80,

        _96 = 96,

        _112 = 112,

        _128 = 128,

        _160 = 160,

        _192 = 192,

        _224 = 224,

        _256 = 256,

        _320 = 320,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }



}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore  649
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
#pragma warning restore 8765